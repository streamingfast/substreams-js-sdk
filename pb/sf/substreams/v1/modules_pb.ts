// @generated by protoc-gen-es v2.3.0 with parameter "target=ts"
// @generated from file sf/substreams/v1/modules.proto (package sf.substreams.v1, syntax proto3)
/* eslint-disable */

import type { GenEnum, GenFile, GenMessage } from "@bufbuild/protobuf/codegenv1";
import { enumDesc, fileDesc, messageDesc } from "@bufbuild/protobuf/codegenv1";
import type { Message } from "@bufbuild/protobuf";

/**
 * Describes the file sf/substreams/v1/modules.proto.
 */
export const file_sf_substreams_v1_modules: GenFile = /*@__PURE__*/
  fileDesc("Ch5zZi9zdWJzdHJlYW1zL3YxL21vZHVsZXMucHJvdG8SEHNmLnN1YnN0cmVhbXMudjEiYAoHTW9kdWxlcxIpCgdtb2R1bGVzGAEgAygLMhguc2Yuc3Vic3RyZWFtcy52MS5Nb2R1bGUSKgoIYmluYXJpZXMYAiADKAsyGC5zZi5zdWJzdHJlYW1zLnYxLkJpbmFyeSInCgZCaW5hcnkSDAoEdHlwZRgBIAEoCRIPCgdjb250ZW50GAIgASgMIrcLCgZNb2R1bGUSDAoEbmFtZRgBIAEoCRI0CghraW5kX21hcBgCIAEoCzIgLnNmLnN1YnN0cmVhbXMudjEuTW9kdWxlLktpbmRNYXBIABI4CgpraW5kX3N0b3JlGAMgASgLMiIuc2Yuc3Vic3RyZWFtcy52MS5Nb2R1bGUuS2luZFN0b3JlSAASQwoQa2luZF9ibG9ja19pbmRleBgKIAEoCzInLnNmLnN1YnN0cmVhbXMudjEuTW9kdWxlLktpbmRCbG9ja0luZGV4SAASFAoMYmluYXJ5X2luZGV4GAQgASgNEhkKEWJpbmFyeV9lbnRyeXBvaW50GAUgASgJEi4KBmlucHV0cxgGIAMoCzIeLnNmLnN1YnN0cmVhbXMudjEuTW9kdWxlLklucHV0Ei8KBm91dHB1dBgHIAEoCzIfLnNmLnN1YnN0cmVhbXMudjEuTW9kdWxlLk91dHB1dBIVCg1pbml0aWFsX2Jsb2NrGAggASgEEjoKDGJsb2NrX2ZpbHRlchgJIAEoCzIkLnNmLnN1YnN0cmVhbXMudjEuTW9kdWxlLkJsb2NrRmlsdGVyGoUBCgtCbG9ja0ZpbHRlchIOCgZtb2R1bGUYASABKAkSFgoMcXVlcnlfc3RyaW5nGAIgASgJSAASRQoRcXVlcnlfZnJvbV9wYXJhbXMYAyABKAsyKC5zZi5zdWJzdHJlYW1zLnYxLk1vZHVsZS5RdWVyeUZyb21QYXJhbXNIAEIHCgVxdWVyeRoRCg9RdWVyeUZyb21QYXJhbXMaHgoHS2luZE1hcBITCgtvdXRwdXRfdHlwZRgBIAEoCRrHAgoJS2luZFN0b3JlEkYKDXVwZGF0ZV9wb2xpY3kYASABKA4yLy5zZi5zdWJzdHJlYW1zLnYxLk1vZHVsZS5LaW5kU3RvcmUuVXBkYXRlUG9saWN5EhIKCnZhbHVlX3R5cGUYAiABKAki3QEKDFVwZGF0ZVBvbGljeRIXChNVUERBVEVfUE9MSUNZX1VOU0VUEAASFQoRVVBEQVRFX1BPTElDWV9TRVQQARIjCh9VUERBVEVfUE9MSUNZX1NFVF9JRl9OT1RfRVhJU1RTEAISFQoRVVBEQVRFX1BPTElDWV9BREQQAxIVChFVUERBVEVfUE9MSUNZX01JThAEEhUKEVVQREFURV9QT0xJQ1lfTUFYEAUSGAoUVVBEQVRFX1BPTElDWV9BUFBFTkQQBhIZChVVUERBVEVfUE9MSUNZX1NFVF9TVU0QBxolCg5LaW5kQmxvY2tJbmRleBITCgtvdXRwdXRfdHlwZRgBIAEoCRq4AwoFSW5wdXQSNwoGc291cmNlGAEgASgLMiUuc2Yuc3Vic3RyZWFtcy52MS5Nb2R1bGUuSW5wdXQuU291cmNlSAASMQoDbWFwGAIgASgLMiIuc2Yuc3Vic3RyZWFtcy52MS5Nb2R1bGUuSW5wdXQuTWFwSAASNQoFc3RvcmUYAyABKAsyJC5zZi5zdWJzdHJlYW1zLnYxLk1vZHVsZS5JbnB1dC5TdG9yZUgAEjcKBnBhcmFtcxgEIAEoCzIlLnNmLnN1YnN0cmVhbXMudjEuTW9kdWxlLklucHV0LlBhcmFtc0gAGhYKBlNvdXJjZRIMCgR0eXBlGAEgASgJGhoKA01hcBITCgttb2R1bGVfbmFtZRgBIAEoCRp9CgVTdG9yZRITCgttb2R1bGVfbmFtZRgBIAEoCRI3CgRtb2RlGAIgASgOMikuc2Yuc3Vic3RyZWFtcy52MS5Nb2R1bGUuSW5wdXQuU3RvcmUuTW9kZSImCgRNb2RlEgkKBVVOU0VUEAASBwoDR0VUEAESCgoGREVMVEFTEAIaFwoGUGFyYW1zEg0KBXZhbHVlGAEgASgJQgcKBWlucHV0GhYKBk91dHB1dBIMCgR0eXBlGAEgASgJQgYKBGtpbmRCRlpEZ2l0aHViLmNvbS9zdHJlYW1pbmdmYXN0L3N1YnN0cmVhbXMvcGIvc2Yvc3Vic3RyZWFtcy92MTtwYnN1YnN0cmVhbXNiBnByb3RvMw");

/**
 * @generated from message sf.substreams.v1.Modules
 */
export type Modules = Message<"sf.substreams.v1.Modules"> & {
  /**
   * @generated from field: repeated sf.substreams.v1.Module modules = 1;
   */
  modules: Module[];

  /**
   * @generated from field: repeated sf.substreams.v1.Binary binaries = 2;
   */
  binaries: Binary[];
};

/**
 * Describes the message sf.substreams.v1.Modules.
 * Use `create(ModulesSchema)` to create a new message.
 */
export const ModulesSchema: GenMessage<Modules> = /*@__PURE__*/
  messageDesc(file_sf_substreams_v1_modules, 0);

/**
 * Binary represents some code compiled to its binary form.
 *
 * @generated from message sf.substreams.v1.Binary
 */
export type Binary = Message<"sf.substreams.v1.Binary"> & {
  /**
   * @generated from field: string type = 1;
   */
  type: string;

  /**
   * @generated from field: bytes content = 2;
   */
  content: Uint8Array;
};

/**
 * Describes the message sf.substreams.v1.Binary.
 * Use `create(BinarySchema)` to create a new message.
 */
export const BinarySchema: GenMessage<Binary> = /*@__PURE__*/
  messageDesc(file_sf_substreams_v1_modules, 1);

/**
 * @generated from message sf.substreams.v1.Module
 */
export type Module = Message<"sf.substreams.v1.Module"> & {
  /**
   * @generated from field: string name = 1;
   */
  name: string;

  /**
   * @generated from oneof sf.substreams.v1.Module.kind
   */
  kind: {
    /**
     * @generated from field: sf.substreams.v1.Module.KindMap kind_map = 2;
     */
    value: Module_KindMap;
    case: "kindMap";
  } | {
    /**
     * @generated from field: sf.substreams.v1.Module.KindStore kind_store = 3;
     */
    value: Module_KindStore;
    case: "kindStore";
  } | {
    /**
     * @generated from field: sf.substreams.v1.Module.KindBlockIndex kind_block_index = 10;
     */
    value: Module_KindBlockIndex;
    case: "kindBlockIndex";
  } | { case: undefined; value?: undefined };

  /**
   * @generated from field: uint32 binary_index = 4;
   */
  binaryIndex: number;

  /**
   * @generated from field: string binary_entrypoint = 5;
   */
  binaryEntrypoint: string;

  /**
   * @generated from field: repeated sf.substreams.v1.Module.Input inputs = 6;
   */
  inputs: Module_Input[];

  /**
   * @generated from field: sf.substreams.v1.Module.Output output = 7;
   */
  output?: Module_Output;

  /**
   * @generated from field: uint64 initial_block = 8;
   */
  initialBlock: bigint;

  /**
   * @generated from field: sf.substreams.v1.Module.BlockFilter block_filter = 9;
   */
  blockFilter?: Module_BlockFilter;
};

/**
 * Describes the message sf.substreams.v1.Module.
 * Use `create(ModuleSchema)` to create a new message.
 */
export const ModuleSchema: GenMessage<Module> = /*@__PURE__*/
  messageDesc(file_sf_substreams_v1_modules, 2);

/**
 * @generated from message sf.substreams.v1.Module.BlockFilter
 */
export type Module_BlockFilter = Message<"sf.substreams.v1.Module.BlockFilter"> & {
  /**
   * @generated from field: string module = 1;
   */
  module: string;

  /**
   * @generated from oneof sf.substreams.v1.Module.BlockFilter.query
   */
  query: {
    /**
     * @generated from field: string query_string = 2;
     */
    value: string;
    case: "queryString";
  } | {
    /**
     * QueryFromStore query_from_store_keys = 3;
     *
     * @generated from field: sf.substreams.v1.Module.QueryFromParams query_from_params = 3;
     */
    value: Module_QueryFromParams;
    case: "queryFromParams";
  } | { case: undefined; value?: undefined };
};

/**
 * Describes the message sf.substreams.v1.Module.BlockFilter.
 * Use `create(Module_BlockFilterSchema)` to create a new message.
 */
export const Module_BlockFilterSchema: GenMessage<Module_BlockFilter> = /*@__PURE__*/
  messageDesc(file_sf_substreams_v1_modules, 2, 0);

/**
 * @generated from message sf.substreams.v1.Module.QueryFromParams
 */
export type Module_QueryFromParams = Message<"sf.substreams.v1.Module.QueryFromParams"> & {
};

/**
 * Describes the message sf.substreams.v1.Module.QueryFromParams.
 * Use `create(Module_QueryFromParamsSchema)` to create a new message.
 */
export const Module_QueryFromParamsSchema: GenMessage<Module_QueryFromParams> = /*@__PURE__*/
  messageDesc(file_sf_substreams_v1_modules, 2, 1);

/**
 * @generated from message sf.substreams.v1.Module.KindMap
 */
export type Module_KindMap = Message<"sf.substreams.v1.Module.KindMap"> & {
  /**
   * @generated from field: string output_type = 1;
   */
  outputType: string;
};

/**
 * Describes the message sf.substreams.v1.Module.KindMap.
 * Use `create(Module_KindMapSchema)` to create a new message.
 */
export const Module_KindMapSchema: GenMessage<Module_KindMap> = /*@__PURE__*/
  messageDesc(file_sf_substreams_v1_modules, 2, 2);

/**
 * @generated from message sf.substreams.v1.Module.KindStore
 */
export type Module_KindStore = Message<"sf.substreams.v1.Module.KindStore"> & {
  /**
   * The `update_policy` determines the functions available to mutate the store
   * (like `set()`, `set_if_not_exists()` or `sum()`, etc..) in
   * order to ensure that parallel operations are possible and deterministic
   *
   * Say a store cumulates keys from block 0 to 1M, and a second store
   * cumulates keys from block 1M to 2M. When we want to use this
   * store as a dependency for a downstream module, we will merge the
   * two stores according to this policy.
   *
   * @generated from field: sf.substreams.v1.Module.KindStore.UpdatePolicy update_policy = 1;
   */
  updatePolicy: Module_KindStore_UpdatePolicy;

  /**
   * @generated from field: string value_type = 2;
   */
  valueType: string;
};

/**
 * Describes the message sf.substreams.v1.Module.KindStore.
 * Use `create(Module_KindStoreSchema)` to create a new message.
 */
export const Module_KindStoreSchema: GenMessage<Module_KindStore> = /*@__PURE__*/
  messageDesc(file_sf_substreams_v1_modules, 2, 3);

/**
 * @generated from enum sf.substreams.v1.Module.KindStore.UpdatePolicy
 */
export enum Module_KindStore_UpdatePolicy {
  /**
   * @generated from enum value: UPDATE_POLICY_UNSET = 0;
   */
  UNSET = 0,

  /**
   * Provides a store where you can `set()` keys, and the latest key wins
   *
   * @generated from enum value: UPDATE_POLICY_SET = 1;
   */
  SET = 1,

  /**
   * Provides a store where you can `set_if_not_exists()` keys, and the first key wins
   *
   * @generated from enum value: UPDATE_POLICY_SET_IF_NOT_EXISTS = 2;
   */
  SET_IF_NOT_EXISTS = 2,

  /**
   * Provides a store where you can `add_*()` keys, where two stores merge by summing its values.
   *
   * @generated from enum value: UPDATE_POLICY_ADD = 3;
   */
  ADD = 3,

  /**
   * Provides a store where you can `min_*()` keys, where two stores merge by leaving the minimum value.
   *
   * @generated from enum value: UPDATE_POLICY_MIN = 4;
   */
  MIN = 4,

  /**
   * Provides a store where you can `max_*()` keys, where two stores merge by leaving the maximum value.
   *
   * @generated from enum value: UPDATE_POLICY_MAX = 5;
   */
  MAX = 5,

  /**
   * Provides a store where you can `append()` keys, where two stores merge by concatenating the bytes in order.
   *
   * @generated from enum value: UPDATE_POLICY_APPEND = 6;
   */
  APPEND = 6,

  /**
   * Provides a store with both `set()` and `sum()` functions.
   *
   * @generated from enum value: UPDATE_POLICY_SET_SUM = 7;
   */
  SET_SUM = 7,
}

/**
 * Describes the enum sf.substreams.v1.Module.KindStore.UpdatePolicy.
 */
export const Module_KindStore_UpdatePolicySchema: GenEnum<Module_KindStore_UpdatePolicy> = /*@__PURE__*/
  enumDesc(file_sf_substreams_v1_modules, 2, 3, 0);

/**
 * @generated from message sf.substreams.v1.Module.KindBlockIndex
 */
export type Module_KindBlockIndex = Message<"sf.substreams.v1.Module.KindBlockIndex"> & {
  /**
   * @generated from field: string output_type = 1;
   */
  outputType: string;
};

/**
 * Describes the message sf.substreams.v1.Module.KindBlockIndex.
 * Use `create(Module_KindBlockIndexSchema)` to create a new message.
 */
export const Module_KindBlockIndexSchema: GenMessage<Module_KindBlockIndex> = /*@__PURE__*/
  messageDesc(file_sf_substreams_v1_modules, 2, 4);

/**
 * @generated from message sf.substreams.v1.Module.Input
 */
export type Module_Input = Message<"sf.substreams.v1.Module.Input"> & {
  /**
   * @generated from oneof sf.substreams.v1.Module.Input.input
   */
  input: {
    /**
     * @generated from field: sf.substreams.v1.Module.Input.Source source = 1;
     */
    value: Module_Input_Source;
    case: "source";
  } | {
    /**
     * @generated from field: sf.substreams.v1.Module.Input.Map map = 2;
     */
    value: Module_Input_Map;
    case: "map";
  } | {
    /**
     * @generated from field: sf.substreams.v1.Module.Input.Store store = 3;
     */
    value: Module_Input_Store;
    case: "store";
  } | {
    /**
     * @generated from field: sf.substreams.v1.Module.Input.Params params = 4;
     */
    value: Module_Input_Params;
    case: "params";
  } | { case: undefined; value?: undefined };
};

/**
 * Describes the message sf.substreams.v1.Module.Input.
 * Use `create(Module_InputSchema)` to create a new message.
 */
export const Module_InputSchema: GenMessage<Module_Input> = /*@__PURE__*/
  messageDesc(file_sf_substreams_v1_modules, 2, 5);

/**
 * @generated from message sf.substreams.v1.Module.Input.Source
 */
export type Module_Input_Source = Message<"sf.substreams.v1.Module.Input.Source"> & {
  /**
   * ex: "sf.ethereum.type.v1.Block"
   *
   * @generated from field: string type = 1;
   */
  type: string;
};

/**
 * Describes the message sf.substreams.v1.Module.Input.Source.
 * Use `create(Module_Input_SourceSchema)` to create a new message.
 */
export const Module_Input_SourceSchema: GenMessage<Module_Input_Source> = /*@__PURE__*/
  messageDesc(file_sf_substreams_v1_modules, 2, 5, 0);

/**
 * @generated from message sf.substreams.v1.Module.Input.Map
 */
export type Module_Input_Map = Message<"sf.substreams.v1.Module.Input.Map"> & {
  /**
   * ex: "block_to_pairs"
   *
   * @generated from field: string module_name = 1;
   */
  moduleName: string;
};

/**
 * Describes the message sf.substreams.v1.Module.Input.Map.
 * Use `create(Module_Input_MapSchema)` to create a new message.
 */
export const Module_Input_MapSchema: GenMessage<Module_Input_Map> = /*@__PURE__*/
  messageDesc(file_sf_substreams_v1_modules, 2, 5, 1);

/**
 * @generated from message sf.substreams.v1.Module.Input.Store
 */
export type Module_Input_Store = Message<"sf.substreams.v1.Module.Input.Store"> & {
  /**
   * @generated from field: string module_name = 1;
   */
  moduleName: string;

  /**
   * @generated from field: sf.substreams.v1.Module.Input.Store.Mode mode = 2;
   */
  mode: Module_Input_Store_Mode;
};

/**
 * Describes the message sf.substreams.v1.Module.Input.Store.
 * Use `create(Module_Input_StoreSchema)` to create a new message.
 */
export const Module_Input_StoreSchema: GenMessage<Module_Input_Store> = /*@__PURE__*/
  messageDesc(file_sf_substreams_v1_modules, 2, 5, 2);

/**
 * @generated from enum sf.substreams.v1.Module.Input.Store.Mode
 */
export enum Module_Input_Store_Mode {
  /**
   * @generated from enum value: UNSET = 0;
   */
  UNSET = 0,

  /**
   * @generated from enum value: GET = 1;
   */
  GET = 1,

  /**
   * @generated from enum value: DELTAS = 2;
   */
  DELTAS = 2,
}

/**
 * Describes the enum sf.substreams.v1.Module.Input.Store.Mode.
 */
export const Module_Input_Store_ModeSchema: GenEnum<Module_Input_Store_Mode> = /*@__PURE__*/
  enumDesc(file_sf_substreams_v1_modules, 2, 5, 2, 0);

/**
 * @generated from message sf.substreams.v1.Module.Input.Params
 */
export type Module_Input_Params = Message<"sf.substreams.v1.Module.Input.Params"> & {
  /**
   * @generated from field: string value = 1;
   */
  value: string;
};

/**
 * Describes the message sf.substreams.v1.Module.Input.Params.
 * Use `create(Module_Input_ParamsSchema)` to create a new message.
 */
export const Module_Input_ParamsSchema: GenMessage<Module_Input_Params> = /*@__PURE__*/
  messageDesc(file_sf_substreams_v1_modules, 2, 5, 3);

/**
 * @generated from message sf.substreams.v1.Module.Output
 */
export type Module_Output = Message<"sf.substreams.v1.Module.Output"> & {
  /**
   * @generated from field: string type = 1;
   */
  type: string;
};

/**
 * Describes the message sf.substreams.v1.Module.Output.
 * Use `create(Module_OutputSchema)` to create a new message.
 */
export const Module_OutputSchema: GenMessage<Module_Output> = /*@__PURE__*/
  messageDesc(file_sf_substreams_v1_modules, 2, 6);

