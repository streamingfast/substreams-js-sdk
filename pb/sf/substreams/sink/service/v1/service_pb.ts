// @generated by protoc-gen-es v2.3.0 with parameter "target=ts"
// @generated from file sf/substreams/sink/service/v1/service.proto (package sf.substreams.sink.service.v1, syntax proto3)
/* eslint-disable */

import type { GenEnum, GenFile, GenMessage, GenService } from "@bufbuild/protobuf/codegenv1";
import { enumDesc, fileDesc, messageDesc, serviceDesc } from "@bufbuild/protobuf/codegenv1";
import type { Package } from "../../../v1/package_pb";
import { file_sf_substreams_v1_package } from "../../../v1/package_pb";
import { file_sf_substreams_options } from "../../../options_pb";
import type { Message } from "@bufbuild/protobuf";

/**
 * Describes the file sf/substreams/sink/service/v1/service.proto.
 */
export const file_sf_substreams_sink_service_v1_service: GenFile = /*@__PURE__*/
  fileDesc("CitzZi9zdWJzdHJlYW1zL3Npbmsvc2VydmljZS92MS9zZXJ2aWNlLnByb3RvEh1zZi5zdWJzdHJlYW1zLnNpbmsuc2VydmljZS52MSKeAQoNRGVwbG95UmVxdWVzdBI1ChJzdWJzdHJlYW1zX3BhY2thZ2UYASABKAsyGS5zZi5zdWJzdHJlYW1zLnYxLlBhY2thZ2USGAoQZGV2ZWxvcG1lbnRfbW9kZRgCIAEoCBI8CgpwYXJhbWV0ZXJzGAMgAygLMiguc2Yuc3Vic3RyZWFtcy5zaW5rLnNlcnZpY2UudjEuUGFyYW1ldGVyIicKCVBhcmFtZXRlchILCgNrZXkYASABKAkSDQoFdmFsdWUYAiABKAkihgIKDkRlcGxveVJlc3BvbnNlEj8KBnN0YXR1cxgBIAEoDjIvLnNmLnN1YnN0cmVhbXMuc2luay5zZXJ2aWNlLnYxLkRlcGxveW1lbnRTdGF0dXMSFQoNZGVwbG95bWVudF9pZBgCIAEoCRJNCghzZXJ2aWNlcxgDIAMoCzI7LnNmLnN1YnN0cmVhbXMuc2luay5zZXJ2aWNlLnYxLkRlcGxveVJlc3BvbnNlLlNlcnZpY2VzRW50cnkSDgoGcmVhc29uGAQgASgJEgwKBG1vdGQYBSABKAkaLwoNU2VydmljZXNFbnRyeRILCgNrZXkYASABKAkSDQoFdmFsdWUYAiABKAk6AjgBImwKDVVwZGF0ZVJlcXVlc3QSNQoSc3Vic3RyZWFtc19wYWNrYWdlGAEgASgLMhkuc2Yuc3Vic3RyZWFtcy52MS5QYWNrYWdlEhUKDWRlcGxveW1lbnRfaWQYAiABKAkSDQoFcmVzZXQYAyABKAgi7wEKDlVwZGF0ZVJlc3BvbnNlEj8KBnN0YXR1cxgBIAEoDjIvLnNmLnN1YnN0cmVhbXMuc2luay5zZXJ2aWNlLnYxLkRlcGxveW1lbnRTdGF0dXMSTQoIc2VydmljZXMYAiADKAsyOy5zZi5zdWJzdHJlYW1zLnNpbmsuc2VydmljZS52MS5VcGRhdGVSZXNwb25zZS5TZXJ2aWNlc0VudHJ5Eg4KBnJlYXNvbhgDIAEoCRIMCgRtb3RkGAQgASgJGi8KDVNlcnZpY2VzRW50cnkSCwoDa2V5GAEgASgJEg0KBXZhbHVlGAIgASgJOgI4ASIkCgtJbmZvUmVxdWVzdBIVCg1kZXBsb3ltZW50X2lkGAEgASgJIuwCCgxJbmZvUmVzcG9uc2USPwoGc3RhdHVzGAEgASgOMi8uc2Yuc3Vic3RyZWFtcy5zaW5rLnNlcnZpY2UudjEuRGVwbG95bWVudFN0YXR1cxJLCghzZXJ2aWNlcxgCIAMoCzI5LnNmLnN1YnN0cmVhbXMuc2luay5zZXJ2aWNlLnYxLkluZm9SZXNwb25zZS5TZXJ2aWNlc0VudHJ5Eg4KBnJlYXNvbhgDIAEoCRJACgxwYWNrYWdlX2luZm8YBCABKAsyKi5zZi5zdWJzdHJlYW1zLnNpbmsuc2VydmljZS52MS5QYWNrYWdlSW5mbxI9Cghwcm9ncmVzcxgFIAEoCzIrLnNmLnN1YnN0cmVhbXMuc2luay5zZXJ2aWNlLnYxLlNpbmtQcm9ncmVzcxIMCgRtb3RkGAYgASgJGi8KDVNlcnZpY2VzRW50cnkSCwoDa2V5GAEgASgJEg0KBXZhbHVlGAIgASgJOgI4ASIsCgxTaW5rUHJvZ3Jlc3MSHAoUbGFzdF9wcm9jZXNzZWRfYmxvY2sYASABKAQiZAoLUGFja2FnZUluZm8SDAoEbmFtZRgBIAEoCRIPCgd2ZXJzaW9uGAIgASgJEhoKEm91dHB1dF9tb2R1bGVfbmFtZRgDIAEoCRIaChJvdXRwdXRfbW9kdWxlX2hhc2gYBCABKAkiDQoLTGlzdFJlcXVlc3QiWAoMTGlzdFJlc3BvbnNlEkgKC2RlcGxveW1lbnRzGAEgAygLMjMuc2Yuc3Vic3RyZWFtcy5zaW5rLnNlcnZpY2UudjEuRGVwbG95bWVudFdpdGhTdGF0dXMiggIKFERlcGxveW1lbnRXaXRoU3RhdHVzEgoKAmlkGAEgASgJEj8KBnN0YXR1cxgCIAEoDjIvLnNmLnN1YnN0cmVhbXMuc2luay5zZXJ2aWNlLnYxLkRlcGxveW1lbnRTdGF0dXMSDgoGcmVhc29uGAMgASgJEkAKDHBhY2thZ2VfaW5mbxgEIAEoCzIqLnNmLnN1YnN0cmVhbXMuc2luay5zZXJ2aWNlLnYxLlBhY2thZ2VJbmZvEj0KCHByb2dyZXNzGAUgASgLMisuc2Yuc3Vic3RyZWFtcy5zaW5rLnNlcnZpY2UudjEuU2lua1Byb2dyZXNzEgwKBG1vdGQYBiABKAkiJgoNUmVtb3ZlUmVxdWVzdBIVCg1kZXBsb3ltZW50X2lkGAEgASgJIloKDlJlbW92ZVJlc3BvbnNlEkgKD3ByZXZpb3VzX3N0YXR1cxgBIAEoDjIvLnNmLnN1YnN0cmVhbXMuc2luay5zZXJ2aWNlLnYxLkRlcGxveW1lbnRTdGF0dXMiJQoMUGF1c2VSZXF1ZXN0EhUKDWRlcGxveW1lbnRfaWQYASABKAkingEKDVBhdXNlUmVzcG9uc2USSAoPcHJldmlvdXNfc3RhdHVzGAEgASgOMi8uc2Yuc3Vic3RyZWFtcy5zaW5rLnNlcnZpY2UudjEuRGVwbG95bWVudFN0YXR1cxJDCgpuZXdfc3RhdHVzGAIgASgOMi8uc2Yuc3Vic3RyZWFtcy5zaW5rLnNlcnZpY2UudjEuRGVwbG95bWVudFN0YXR1cyIkCgtTdG9wUmVxdWVzdBIVCg1kZXBsb3ltZW50X2lkGAEgASgJIp0BCgxTdG9wUmVzcG9uc2USSAoPcHJldmlvdXNfc3RhdHVzGAEgASgOMi8uc2Yuc3Vic3RyZWFtcy5zaW5rLnNlcnZpY2UudjEuRGVwbG95bWVudFN0YXR1cxJDCgpuZXdfc3RhdHVzGAIgASgOMi8uc2Yuc3Vic3RyZWFtcy5zaW5rLnNlcnZpY2UudjEuRGVwbG95bWVudFN0YXR1cyImCg1SZXN1bWVSZXF1ZXN0EhUKDWRlcGxveW1lbnRfaWQYASABKAkinwEKDlJlc3VtZVJlc3BvbnNlEkgKD3ByZXZpb3VzX3N0YXR1cxgBIAEoDjIvLnNmLnN1YnN0cmVhbXMuc2luay5zZXJ2aWNlLnYxLkRlcGxveW1lbnRTdGF0dXMSQwoKbmV3X3N0YXR1cxgCIAEoDjIvLnNmLnN1YnN0cmVhbXMuc2luay5zZXJ2aWNlLnYxLkRlcGxveW1lbnRTdGF0dXMqlwEKEERlcGxveW1lbnRTdGF0dXMSCwoHVU5LTk9XThAAEgsKB1JVTk5JTkcQARILCgdGQUlMSU5HEAISCgoGUEFVU0VEEAMSCwoHU1RPUFBFRBAEEgwKCFNUQVJUSU5HEAUSCwoHUEFVU0lORxAGEgwKCFNUT1BQSU5HEAcSDAoIUkVNT1ZJTkcQCBIMCghSRVNVTUlORxAJMq0GCghQcm92aWRlchJlCgZEZXBsb3kSLC5zZi5zdWJzdHJlYW1zLnNpbmsuc2VydmljZS52MS5EZXBsb3lSZXF1ZXN0Gi0uc2Yuc3Vic3RyZWFtcy5zaW5rLnNlcnZpY2UudjEuRGVwbG95UmVzcG9uc2USZQoGVXBkYXRlEiwuc2Yuc3Vic3RyZWFtcy5zaW5rLnNlcnZpY2UudjEuVXBkYXRlUmVxdWVzdBotLnNmLnN1YnN0cmVhbXMuc2luay5zZXJ2aWNlLnYxLlVwZGF0ZVJlc3BvbnNlEl8KBEluZm8SKi5zZi5zdWJzdHJlYW1zLnNpbmsuc2VydmljZS52MS5JbmZvUmVxdWVzdBorLnNmLnN1YnN0cmVhbXMuc2luay5zZXJ2aWNlLnYxLkluZm9SZXNwb25zZRJfCgRMaXN0Eiouc2Yuc3Vic3RyZWFtcy5zaW5rLnNlcnZpY2UudjEuTGlzdFJlcXVlc3QaKy5zZi5zdWJzdHJlYW1zLnNpbmsuc2VydmljZS52MS5MaXN0UmVzcG9uc2USYgoFUGF1c2USKy5zZi5zdWJzdHJlYW1zLnNpbmsuc2VydmljZS52MS5QYXVzZVJlcXVlc3QaLC5zZi5zdWJzdHJlYW1zLnNpbmsuc2VydmljZS52MS5QYXVzZVJlc3BvbnNlEl8KBFN0b3ASKi5zZi5zdWJzdHJlYW1zLnNpbmsuc2VydmljZS52MS5TdG9wUmVxdWVzdBorLnNmLnN1YnN0cmVhbXMuc2luay5zZXJ2aWNlLnYxLlN0b3BSZXNwb25zZRJlCgZSZXN1bWUSLC5zZi5zdWJzdHJlYW1zLnNpbmsuc2VydmljZS52MS5SZXN1bWVSZXF1ZXN0Gi0uc2Yuc3Vic3RyZWFtcy5zaW5rLnNlcnZpY2UudjEuUmVzdW1lUmVzcG9uc2USZQoGUmVtb3ZlEiwuc2Yuc3Vic3RyZWFtcy5zaW5rLnNlcnZpY2UudjEuUmVtb3ZlUmVxdWVzdBotLnNmLnN1YnN0cmVhbXMuc2luay5zZXJ2aWNlLnYxLlJlbW92ZVJlc3BvbnNlQlBaTmdpdGh1Yi5jb20vc3RyZWFtaW5nZmFzdC9zdWJzdHJlYW1zL3BiL3NmL3N1YnN0cmVhbXMvc2luay9zZXJ2aWNlL3YxO3Bic2lua3N2Y2IGcHJvdG8z", [file_sf_substreams_v1_package, file_sf_substreams_options]);

/**
 * @generated from message sf.substreams.sink.service.v1.DeployRequest
 */
export type DeployRequest = Message<"sf.substreams.sink.service.v1.DeployRequest"> & {
  /**
   * @generated from field: sf.substreams.v1.Package substreams_package = 1;
   */
  substreamsPackage?: Package;

  /**
   * @generated from field: bool development_mode = 2;
   */
  developmentMode: boolean;

  /**
   * @generated from field: repeated sf.substreams.sink.service.v1.Parameter parameters = 3;
   */
  parameters: Parameter[];
};

/**
 * Describes the message sf.substreams.sink.service.v1.DeployRequest.
 * Use `create(DeployRequestSchema)` to create a new message.
 */
export const DeployRequestSchema: GenMessage<DeployRequest> = /*@__PURE__*/
  messageDesc(file_sf_substreams_sink_service_v1_service, 0);

/**
 * @generated from message sf.substreams.sink.service.v1.Parameter
 */
export type Parameter = Message<"sf.substreams.sink.service.v1.Parameter"> & {
  /**
   * @generated from field: string key = 1;
   */
  key: string;

  /**
   * @generated from field: string value = 2;
   */
  value: string;
};

/**
 * Describes the message sf.substreams.sink.service.v1.Parameter.
 * Use `create(ParameterSchema)` to create a new message.
 */
export const ParameterSchema: GenMessage<Parameter> = /*@__PURE__*/
  messageDesc(file_sf_substreams_sink_service_v1_service, 1);

/**
 * @generated from message sf.substreams.sink.service.v1.DeployResponse
 */
export type DeployResponse = Message<"sf.substreams.sink.service.v1.DeployResponse"> & {
  /**
   * @generated from field: sf.substreams.sink.service.v1.DeploymentStatus status = 1;
   */
  status: DeploymentStatus;

  /**
   * deployment_id is a short name (max 8 characters) that uniquely identifies your deployment
   *
   * @generated from field: string deployment_id = 2;
   */
  deploymentId: string;

  /**
   * @generated from field: map<string, string> services = 3;
   */
  services: { [key: string]: string };

  /**
   * @generated from field: string reason = 4;
   */
  reason: string;

  /**
   * @generated from field: string motd = 5;
   */
  motd: string;
};

/**
 * Describes the message sf.substreams.sink.service.v1.DeployResponse.
 * Use `create(DeployResponseSchema)` to create a new message.
 */
export const DeployResponseSchema: GenMessage<DeployResponse> = /*@__PURE__*/
  messageDesc(file_sf_substreams_sink_service_v1_service, 2);

/**
 * @generated from message sf.substreams.sink.service.v1.UpdateRequest
 */
export type UpdateRequest = Message<"sf.substreams.sink.service.v1.UpdateRequest"> & {
  /**
   * @generated from field: sf.substreams.v1.Package substreams_package = 1;
   */
  substreamsPackage?: Package;

  /**
   * @generated from field: string deployment_id = 2;
   */
  deploymentId: string;

  /**
   * @generated from field: bool reset = 3;
   */
  reset: boolean;
};

/**
 * Describes the message sf.substreams.sink.service.v1.UpdateRequest.
 * Use `create(UpdateRequestSchema)` to create a new message.
 */
export const UpdateRequestSchema: GenMessage<UpdateRequest> = /*@__PURE__*/
  messageDesc(file_sf_substreams_sink_service_v1_service, 3);

/**
 * @generated from message sf.substreams.sink.service.v1.UpdateResponse
 */
export type UpdateResponse = Message<"sf.substreams.sink.service.v1.UpdateResponse"> & {
  /**
   * @generated from field: sf.substreams.sink.service.v1.DeploymentStatus status = 1;
   */
  status: DeploymentStatus;

  /**
   * @generated from field: map<string, string> services = 2;
   */
  services: { [key: string]: string };

  /**
   * @generated from field: string reason = 3;
   */
  reason: string;

  /**
   * @generated from field: string motd = 4;
   */
  motd: string;
};

/**
 * Describes the message sf.substreams.sink.service.v1.UpdateResponse.
 * Use `create(UpdateResponseSchema)` to create a new message.
 */
export const UpdateResponseSchema: GenMessage<UpdateResponse> = /*@__PURE__*/
  messageDesc(file_sf_substreams_sink_service_v1_service, 4);

/**
 * @generated from message sf.substreams.sink.service.v1.InfoRequest
 */
export type InfoRequest = Message<"sf.substreams.sink.service.v1.InfoRequest"> & {
  /**
   * @generated from field: string deployment_id = 1;
   */
  deploymentId: string;
};

/**
 * Describes the message sf.substreams.sink.service.v1.InfoRequest.
 * Use `create(InfoRequestSchema)` to create a new message.
 */
export const InfoRequestSchema: GenMessage<InfoRequest> = /*@__PURE__*/
  messageDesc(file_sf_substreams_sink_service_v1_service, 5);

/**
 * @generated from message sf.substreams.sink.service.v1.InfoResponse
 */
export type InfoResponse = Message<"sf.substreams.sink.service.v1.InfoResponse"> & {
  /**
   * @generated from field: sf.substreams.sink.service.v1.DeploymentStatus status = 1;
   */
  status: DeploymentStatus;

  /**
   * @generated from field: map<string, string> services = 2;
   */
  services: { [key: string]: string };

  /**
   * @generated from field: string reason = 3;
   */
  reason: string;

  /**
   * @generated from field: sf.substreams.sink.service.v1.PackageInfo package_info = 4;
   */
  packageInfo?: PackageInfo;

  /**
   * @generated from field: sf.substreams.sink.service.v1.SinkProgress progress = 5;
   */
  progress?: SinkProgress;

  /**
   * @generated from field: string motd = 6;
   */
  motd: string;
};

/**
 * Describes the message sf.substreams.sink.service.v1.InfoResponse.
 * Use `create(InfoResponseSchema)` to create a new message.
 */
export const InfoResponseSchema: GenMessage<InfoResponse> = /*@__PURE__*/
  messageDesc(file_sf_substreams_sink_service_v1_service, 6);

/**
 * @generated from message sf.substreams.sink.service.v1.SinkProgress
 */
export type SinkProgress = Message<"sf.substreams.sink.service.v1.SinkProgress"> & {
  /**
   * @generated from field: uint64 last_processed_block = 1;
   */
  lastProcessedBlock: bigint;
};

/**
 * Describes the message sf.substreams.sink.service.v1.SinkProgress.
 * Use `create(SinkProgressSchema)` to create a new message.
 */
export const SinkProgressSchema: GenMessage<SinkProgress> = /*@__PURE__*/
  messageDesc(file_sf_substreams_sink_service_v1_service, 7);

/**
 * @generated from message sf.substreams.sink.service.v1.PackageInfo
 */
export type PackageInfo = Message<"sf.substreams.sink.service.v1.PackageInfo"> & {
  /**
   * @generated from field: string name = 1;
   */
  name: string;

  /**
   * @generated from field: string version = 2;
   */
  version: string;

  /**
   * @generated from field: string output_module_name = 3;
   */
  outputModuleName: string;

  /**
   * @generated from field: string output_module_hash = 4;
   */
  outputModuleHash: string;
};

/**
 * Describes the message sf.substreams.sink.service.v1.PackageInfo.
 * Use `create(PackageInfoSchema)` to create a new message.
 */
export const PackageInfoSchema: GenMessage<PackageInfo> = /*@__PURE__*/
  messageDesc(file_sf_substreams_sink_service_v1_service, 8);

/**
 * @generated from message sf.substreams.sink.service.v1.ListRequest
 */
export type ListRequest = Message<"sf.substreams.sink.service.v1.ListRequest"> & {
};

/**
 * Describes the message sf.substreams.sink.service.v1.ListRequest.
 * Use `create(ListRequestSchema)` to create a new message.
 */
export const ListRequestSchema: GenMessage<ListRequest> = /*@__PURE__*/
  messageDesc(file_sf_substreams_sink_service_v1_service, 9);

/**
 * @generated from message sf.substreams.sink.service.v1.ListResponse
 */
export type ListResponse = Message<"sf.substreams.sink.service.v1.ListResponse"> & {
  /**
   * @generated from field: repeated sf.substreams.sink.service.v1.DeploymentWithStatus deployments = 1;
   */
  deployments: DeploymentWithStatus[];
};

/**
 * Describes the message sf.substreams.sink.service.v1.ListResponse.
 * Use `create(ListResponseSchema)` to create a new message.
 */
export const ListResponseSchema: GenMessage<ListResponse> = /*@__PURE__*/
  messageDesc(file_sf_substreams_sink_service_v1_service, 10);

/**
 * @generated from message sf.substreams.sink.service.v1.DeploymentWithStatus
 */
export type DeploymentWithStatus = Message<"sf.substreams.sink.service.v1.DeploymentWithStatus"> & {
  /**
   * @generated from field: string id = 1;
   */
  id: string;

  /**
   * @generated from field: sf.substreams.sink.service.v1.DeploymentStatus status = 2;
   */
  status: DeploymentStatus;

  /**
   * @generated from field: string reason = 3;
   */
  reason: string;

  /**
   * @generated from field: sf.substreams.sink.service.v1.PackageInfo package_info = 4;
   */
  packageInfo?: PackageInfo;

  /**
   * @generated from field: sf.substreams.sink.service.v1.SinkProgress progress = 5;
   */
  progress?: SinkProgress;

  /**
   * @generated from field: string motd = 6;
   */
  motd: string;
};

/**
 * Describes the message sf.substreams.sink.service.v1.DeploymentWithStatus.
 * Use `create(DeploymentWithStatusSchema)` to create a new message.
 */
export const DeploymentWithStatusSchema: GenMessage<DeploymentWithStatus> = /*@__PURE__*/
  messageDesc(file_sf_substreams_sink_service_v1_service, 11);

/**
 * @generated from message sf.substreams.sink.service.v1.RemoveRequest
 */
export type RemoveRequest = Message<"sf.substreams.sink.service.v1.RemoveRequest"> & {
  /**
   * @generated from field: string deployment_id = 1;
   */
  deploymentId: string;
};

/**
 * Describes the message sf.substreams.sink.service.v1.RemoveRequest.
 * Use `create(RemoveRequestSchema)` to create a new message.
 */
export const RemoveRequestSchema: GenMessage<RemoveRequest> = /*@__PURE__*/
  messageDesc(file_sf_substreams_sink_service_v1_service, 12);

/**
 * @generated from message sf.substreams.sink.service.v1.RemoveResponse
 */
export type RemoveResponse = Message<"sf.substreams.sink.service.v1.RemoveResponse"> & {
  /**
   * @generated from field: sf.substreams.sink.service.v1.DeploymentStatus previous_status = 1;
   */
  previousStatus: DeploymentStatus;
};

/**
 * Describes the message sf.substreams.sink.service.v1.RemoveResponse.
 * Use `create(RemoveResponseSchema)` to create a new message.
 */
export const RemoveResponseSchema: GenMessage<RemoveResponse> = /*@__PURE__*/
  messageDesc(file_sf_substreams_sink_service_v1_service, 13);

/**
 * @generated from message sf.substreams.sink.service.v1.PauseRequest
 */
export type PauseRequest = Message<"sf.substreams.sink.service.v1.PauseRequest"> & {
  /**
   * @generated from field: string deployment_id = 1;
   */
  deploymentId: string;
};

/**
 * Describes the message sf.substreams.sink.service.v1.PauseRequest.
 * Use `create(PauseRequestSchema)` to create a new message.
 */
export const PauseRequestSchema: GenMessage<PauseRequest> = /*@__PURE__*/
  messageDesc(file_sf_substreams_sink_service_v1_service, 14);

/**
 * @generated from message sf.substreams.sink.service.v1.PauseResponse
 */
export type PauseResponse = Message<"sf.substreams.sink.service.v1.PauseResponse"> & {
  /**
   * @generated from field: sf.substreams.sink.service.v1.DeploymentStatus previous_status = 1;
   */
  previousStatus: DeploymentStatus;

  /**
   * @generated from field: sf.substreams.sink.service.v1.DeploymentStatus new_status = 2;
   */
  newStatus: DeploymentStatus;
};

/**
 * Describes the message sf.substreams.sink.service.v1.PauseResponse.
 * Use `create(PauseResponseSchema)` to create a new message.
 */
export const PauseResponseSchema: GenMessage<PauseResponse> = /*@__PURE__*/
  messageDesc(file_sf_substreams_sink_service_v1_service, 15);

/**
 * @generated from message sf.substreams.sink.service.v1.StopRequest
 */
export type StopRequest = Message<"sf.substreams.sink.service.v1.StopRequest"> & {
  /**
   * @generated from field: string deployment_id = 1;
   */
  deploymentId: string;
};

/**
 * Describes the message sf.substreams.sink.service.v1.StopRequest.
 * Use `create(StopRequestSchema)` to create a new message.
 */
export const StopRequestSchema: GenMessage<StopRequest> = /*@__PURE__*/
  messageDesc(file_sf_substreams_sink_service_v1_service, 16);

/**
 * @generated from message sf.substreams.sink.service.v1.StopResponse
 */
export type StopResponse = Message<"sf.substreams.sink.service.v1.StopResponse"> & {
  /**
   * @generated from field: sf.substreams.sink.service.v1.DeploymentStatus previous_status = 1;
   */
  previousStatus: DeploymentStatus;

  /**
   * @generated from field: sf.substreams.sink.service.v1.DeploymentStatus new_status = 2;
   */
  newStatus: DeploymentStatus;
};

/**
 * Describes the message sf.substreams.sink.service.v1.StopResponse.
 * Use `create(StopResponseSchema)` to create a new message.
 */
export const StopResponseSchema: GenMessage<StopResponse> = /*@__PURE__*/
  messageDesc(file_sf_substreams_sink_service_v1_service, 17);

/**
 * @generated from message sf.substreams.sink.service.v1.ResumeRequest
 */
export type ResumeRequest = Message<"sf.substreams.sink.service.v1.ResumeRequest"> & {
  /**
   * @generated from field: string deployment_id = 1;
   */
  deploymentId: string;
};

/**
 * Describes the message sf.substreams.sink.service.v1.ResumeRequest.
 * Use `create(ResumeRequestSchema)` to create a new message.
 */
export const ResumeRequestSchema: GenMessage<ResumeRequest> = /*@__PURE__*/
  messageDesc(file_sf_substreams_sink_service_v1_service, 18);

/**
 * @generated from message sf.substreams.sink.service.v1.ResumeResponse
 */
export type ResumeResponse = Message<"sf.substreams.sink.service.v1.ResumeResponse"> & {
  /**
   * @generated from field: sf.substreams.sink.service.v1.DeploymentStatus previous_status = 1;
   */
  previousStatus: DeploymentStatus;

  /**
   * @generated from field: sf.substreams.sink.service.v1.DeploymentStatus new_status = 2;
   */
  newStatus: DeploymentStatus;
};

/**
 * Describes the message sf.substreams.sink.service.v1.ResumeResponse.
 * Use `create(ResumeResponseSchema)` to create a new message.
 */
export const ResumeResponseSchema: GenMessage<ResumeResponse> = /*@__PURE__*/
  messageDesc(file_sf_substreams_sink_service_v1_service, 19);

/**
 * @generated from enum sf.substreams.sink.service.v1.DeploymentStatus
 */
export enum DeploymentStatus {
  /**
   * @generated from enum value: UNKNOWN = 0;
   */
  UNKNOWN = 0,

  /**
   * @generated from enum value: RUNNING = 1;
   */
  RUNNING = 1,

  /**
   * @generated from enum value: FAILING = 2;
   */
  FAILING = 2,

  /**
   * @generated from enum value: PAUSED = 3;
   */
  PAUSED = 3,

  /**
   * @generated from enum value: STOPPED = 4;
   */
  STOPPED = 4,

  /**
   * @generated from enum value: STARTING = 5;
   */
  STARTING = 5,

  /**
   * @generated from enum value: PAUSING = 6;
   */
  PAUSING = 6,

  /**
   * @generated from enum value: STOPPING = 7;
   */
  STOPPING = 7,

  /**
   * @generated from enum value: REMOVING = 8;
   */
  REMOVING = 8,

  /**
   * @generated from enum value: RESUMING = 9;
   */
  RESUMING = 9,
}

/**
 * Describes the enum sf.substreams.sink.service.v1.DeploymentStatus.
 */
export const DeploymentStatusSchema: GenEnum<DeploymentStatus> = /*@__PURE__*/
  enumDesc(file_sf_substreams_sink_service_v1_service, 0);

/**
 * @generated from service sf.substreams.sink.service.v1.Provider
 */
export const Provider: GenService<{
  /**
   * @generated from rpc sf.substreams.sink.service.v1.Provider.Deploy
   */
  deploy: {
    methodKind: "unary";
    input: typeof DeployRequestSchema;
    output: typeof DeployResponseSchema;
  },
  /**
   * @generated from rpc sf.substreams.sink.service.v1.Provider.Update
   */
  update: {
    methodKind: "unary";
    input: typeof UpdateRequestSchema;
    output: typeof UpdateResponseSchema;
  },
  /**
   * @generated from rpc sf.substreams.sink.service.v1.Provider.Info
   */
  info: {
    methodKind: "unary";
    input: typeof InfoRequestSchema;
    output: typeof InfoResponseSchema;
  },
  /**
   * @generated from rpc sf.substreams.sink.service.v1.Provider.List
   */
  list: {
    methodKind: "unary";
    input: typeof ListRequestSchema;
    output: typeof ListResponseSchema;
  },
  /**
   * @generated from rpc sf.substreams.sink.service.v1.Provider.Pause
   */
  pause: {
    methodKind: "unary";
    input: typeof PauseRequestSchema;
    output: typeof PauseResponseSchema;
  },
  /**
   * @generated from rpc sf.substreams.sink.service.v1.Provider.Stop
   */
  stop: {
    methodKind: "unary";
    input: typeof StopRequestSchema;
    output: typeof StopResponseSchema;
  },
  /**
   * @generated from rpc sf.substreams.sink.service.v1.Provider.Resume
   */
  resume: {
    methodKind: "unary";
    input: typeof ResumeRequestSchema;
    output: typeof ResumeResponseSchema;
  },
  /**
   * @generated from rpc sf.substreams.sink.service.v1.Provider.Remove
   */
  remove: {
    methodKind: "unary";
    input: typeof RemoveRequestSchema;
    output: typeof RemoveResponseSchema;
  },
}> = /*@__PURE__*/
  serviceDesc(file_sf_substreams_sink_service_v1_service, 0);

