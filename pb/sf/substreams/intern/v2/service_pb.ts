// @generated by protoc-gen-es v2.3.0 with parameter "target=ts"
// @generated from file sf/substreams/intern/v2/service.proto (package sf.substreams.internal.v2, syntax proto3)
/* eslint-disable */

import type { GenEnum, GenFile, GenMessage, GenService } from "@bufbuild/protobuf/codegenv1";
import { enumDesc, fileDesc, messageDesc, serviceDesc } from "@bufbuild/protobuf/codegenv1";
import { file_google_protobuf_any } from "@bufbuild/protobuf/wkt";
import type { Modules } from "../../v1/modules_pb";
import { file_sf_substreams_v1_modules } from "../../v1/modules_pb";
import type { Message } from "@bufbuild/protobuf";

/**
 * Describes the file sf/substreams/intern/v2/service.proto.
 */
export const file_sf_substreams_intern_v2_service: GenFile = /*@__PURE__*/
  fileDesc("CiVzZi9zdWJzdHJlYW1zL2ludGVybi92Mi9zZXJ2aWNlLnByb3RvEhlzZi5zdWJzdHJlYW1zLmludGVybmFsLnYyIp0EChNQcm9jZXNzUmFuZ2VSZXF1ZXN0EhoKDnN0b3BfYmxvY2tfbnVtGAIgASgEQgIYARIVCg1vdXRwdXRfbW9kdWxlGAMgASgJEioKB21vZHVsZXMYBCABKAsyGS5zZi5zdWJzdHJlYW1zLnYxLk1vZHVsZXMSDQoFc3RhZ2UYBSABKA0SFwoPbWV0ZXJpbmdfY29uZmlnGAYgASgJEh4KFmZpcnN0X3N0cmVhbWFibGVfYmxvY2sYByABKAQSaAoWd2FzbV9leHRlbnNpb25fY29uZmlncxgJIAMoCzJILnNmLnN1YnN0cmVhbXMuaW50ZXJuYWwudjIuUHJvY2Vzc1JhbmdlUmVxdWVzdC5XYXNtRXh0ZW5zaW9uQ29uZmlnc0VudHJ5EhsKE21lcmdlZF9ibG9ja3Nfc3RvcmUYCiABKAkSEwoLc3RhdGVfc3RvcmUYCyABKAkSHwoXc3RhdGVfc3RvcmVfZGVmYXVsdF90YWcYDCABKAkSFAoMc2VnbWVudF9zaXplGA0gASgEEhIKCmJsb2NrX3R5cGUYDiABKAkSFgoOc2VnbWVudF9udW1iZXIYDyABKAQSFwoPcHJvZHVjdGlvbl9tb2RlGBAgASgIGjsKGVdhc21FeHRlbnNpb25Db25maWdzRW50cnkSCwoDa2V5GAEgASgJEg0KBXZhbHVlGAIgASgJOgI4AUoECAEQAkoECAgQCSLVAQoUUHJvY2Vzc1JhbmdlUmVzcG9uc2USMwoGZmFpbGVkGAQgASgLMiEuc2Yuc3Vic3RyZWFtcy5pbnRlcm5hbC52Mi5GYWlsZWRIABI5Cgljb21wbGV0ZWQYBSABKAsyJC5zZi5zdWJzdHJlYW1zLmludGVybmFsLnYyLkNvbXBsZXRlZEgAEjMKBnVwZGF0ZRgGIAEoCzIhLnNmLnN1YnN0cmVhbXMuaW50ZXJuYWwudjIuVXBkYXRlSABCBgoEdHlwZUoECAEQAkoECAIQA0oECAMQBCKtAQoGVXBkYXRlEhMKC2R1cmF0aW9uX21zGAEgASgEEhgKEHByb2Nlc3NlZF9ibG9ja3MYAiABKAQSGAoQdG90YWxfYnl0ZXNfcmVhZBgDIAEoBBIbChN0b3RhbF9ieXRlc193cml0dGVuGAQgASgEEj0KDW1vZHVsZXNfc3RhdHMYBSADKAsyJi5zZi5zdWJzdHJlYW1zLmludGVybmFsLnYyLk1vZHVsZVN0YXRzIpcCCgtNb2R1bGVTdGF0cxIMCgRuYW1lGAEgASgJEhoKEnByb2Nlc3NpbmdfdGltZV9tcxgCIAEoBBIfChdzdG9yZV9vcGVyYXRpb25fdGltZV9tcxgDIAEoBBIYChBzdG9yZV9yZWFkX2NvdW50GAQgASgEEkwKFWV4dGVybmFsX2NhbGxfbWV0cmljcxgFIAMoCzItLnNmLnN1YnN0cmVhbXMuaW50ZXJuYWwudjIuRXh0ZXJuYWxDYWxsTWV0cmljEhkKEXN0b3JlX3dyaXRlX2NvdW50GAogASgEEiAKGHN0b3JlX2RlbGV0ZXByZWZpeF9jb3VudBgLIAEoBBIYChBzdG9yZV9zaXplX2J5dGVzGAwgASgEIkIKEkV4dGVybmFsQ2FsbE1ldHJpYxIMCgRuYW1lGAEgASgJEg0KBWNvdW50GAIgASgEEg8KB3RpbWVfbXMYAyABKAQiYgoJQ29tcGxldGVkEkMKFGFsbF9wcm9jZXNzZWRfcmFuZ2VzGAEgAygLMiUuc2Yuc3Vic3RyZWFtcy5pbnRlcm5hbC52Mi5CbG9ja1JhbmdlEhAKCHRyYWNlX2lkGAIgASgJIj4KBkZhaWxlZBIOCgZyZWFzb24YASABKAkSDAoEbG9ncxgCIAMoCRIWCg5sb2dzX3RydW5jYXRlZBgDIAEoCCI0CgpCbG9ja1JhbmdlEhMKC3N0YXJ0X2Jsb2NrGAIgASgEEhEKCWVuZF9ibG9jaxgDIAEoBCpRCg5XQVNNTW9kdWxlVHlwZRIgChxXQVNNX01PRFVMRV9UWVBFX1VOU1BFQ0lGSUVEEAASHQoZV0FTTV9NT0RVTEVfVFlQRV9SUENfQ0FMTBABMn8KClN1YnN0cmVhbXMScQoMUHJvY2Vzc1JhbmdlEi4uc2Yuc3Vic3RyZWFtcy5pbnRlcm5hbC52Mi5Qcm9jZXNzUmFuZ2VSZXF1ZXN0Gi8uc2Yuc3Vic3RyZWFtcy5pbnRlcm5hbC52Mi5Qcm9jZXNzUmFuZ2VSZXNwb25zZTABQk1aS2dpdGh1Yi5jb20vc3RyZWFtaW5nZmFzdC9zdWJzdHJlYW1zL3BiL3NmL3N1YnN0cmVhbXMvaW50ZXJuL3YyO3Bic3NpbnRlcm5hbGIGcHJvdG8z", [file_google_protobuf_any, file_sf_substreams_v1_modules]);

/**
 * @generated from message sf.substreams.internal.v2.ProcessRangeRequest
 */
export type ProcessRangeRequest = Message<"sf.substreams.internal.v2.ProcessRangeRequest"> & {
  /**
   * @generated from field: uint64 stop_block_num = 2 [deprecated = true];
   * @deprecated
   */
  stopBlockNum: bigint;

  /**
   * @generated from field: string output_module = 3;
   */
  outputModule: string;

  /**
   * @generated from field: sf.substreams.v1.Modules modules = 4;
   */
  modules?: Modules;

  /**
   * 0-based index of stage to execute up to
   *
   * @generated from field: uint32 stage = 5;
   */
  stage: number;

  /**
   * @generated from field: string metering_config = 6;
   */
  meteringConfig: string;

  /**
   * first block that can be streamed on that chain
   *
   * @generated from field: uint64 first_streamable_block = 7;
   */
  firstStreamableBlock: bigint;

  /**
   * TODO: rename to `wasm_extension_configs`
   *
   * @generated from field: map<string, string> wasm_extension_configs = 9;
   */
  wasmExtensionConfigs: { [key: string]: string };

  /**
   * store to use for merged blocks
   *
   * @generated from field: string merged_blocks_store = 10;
   */
  mergedBlocksStore: string;

  /**
   * store to use for substreams state
   *
   * @generated from field: string state_store = 11;
   */
  stateStore: string;

  /**
   * default tag to use for state store
   *
   * @generated from field: string state_store_default_tag = 12;
   */
  stateStoreDefaultTag: string;

  /**
   * number of blocks to process in a single batch
   *
   * @generated from field: uint64 segment_size = 13;
   */
  segmentSize: bigint;

  /**
   * block type to process
   *
   * @generated from field: string block_type = 14;
   */
  blockType: string;

  /**
   * segment_number * segment_size = start_block_num
   *
   * @generated from field: uint64 segment_number = 15;
   */
  segmentNumber: bigint;

  /**
   * Whether the tier1 initial request was in production mode or in development mode.
   * It's possible to have tier2 requests in development mode, for example if the Substreams
   * needs to back process stores while in development mode.
   *
   * @generated from field: bool production_mode = 16;
   */
  productionMode: boolean;
};

/**
 * Describes the message sf.substreams.internal.v2.ProcessRangeRequest.
 * Use `create(ProcessRangeRequestSchema)` to create a new message.
 */
export const ProcessRangeRequestSchema: GenMessage<ProcessRangeRequest> = /*@__PURE__*/
  messageDesc(file_sf_substreams_intern_v2_service, 0);

/**
 * @generated from message sf.substreams.internal.v2.ProcessRangeResponse
 */
export type ProcessRangeResponse = Message<"sf.substreams.internal.v2.ProcessRangeResponse"> & {
  /**
   * @generated from oneof sf.substreams.internal.v2.ProcessRangeResponse.type
   */
  type: {
    /**
     * @generated from field: sf.substreams.internal.v2.Failed failed = 4;
     */
    value: Failed;
    case: "failed";
  } | {
    /**
     * @generated from field: sf.substreams.internal.v2.Completed completed = 5;
     */
    value: Completed;
    case: "completed";
  } | {
    /**
     * @generated from field: sf.substreams.internal.v2.Update update = 6;
     */
    value: Update;
    case: "update";
  } | { case: undefined; value?: undefined };
};

/**
 * Describes the message sf.substreams.internal.v2.ProcessRangeResponse.
 * Use `create(ProcessRangeResponseSchema)` to create a new message.
 */
export const ProcessRangeResponseSchema: GenMessage<ProcessRangeResponse> = /*@__PURE__*/
  messageDesc(file_sf_substreams_intern_v2_service, 1);

/**
 * @generated from message sf.substreams.internal.v2.Update
 */
export type Update = Message<"sf.substreams.internal.v2.Update"> & {
  /**
   * @generated from field: uint64 duration_ms = 1;
   */
  durationMs: bigint;

  /**
   * @generated from field: uint64 processed_blocks = 2;
   */
  processedBlocks: bigint;

  /**
   * @generated from field: uint64 total_bytes_read = 3;
   */
  totalBytesRead: bigint;

  /**
   * @generated from field: uint64 total_bytes_written = 4;
   */
  totalBytesWritten: bigint;

  /**
   * @generated from field: repeated sf.substreams.internal.v2.ModuleStats modules_stats = 5;
   */
  modulesStats: ModuleStats[];
};

/**
 * Describes the message sf.substreams.internal.v2.Update.
 * Use `create(UpdateSchema)` to create a new message.
 */
export const UpdateSchema: GenMessage<Update> = /*@__PURE__*/
  messageDesc(file_sf_substreams_intern_v2_service, 2);

/**
 * @generated from message sf.substreams.internal.v2.ModuleStats
 */
export type ModuleStats = Message<"sf.substreams.internal.v2.ModuleStats"> & {
  /**
   * @generated from field: string name = 1;
   */
  name: string;

  /**
   * @generated from field: uint64 processing_time_ms = 2;
   */
  processingTimeMs: bigint;

  /**
   * @generated from field: uint64 store_operation_time_ms = 3;
   */
  storeOperationTimeMs: bigint;

  /**
   * @generated from field: uint64 store_read_count = 4;
   */
  storeReadCount: bigint;

  /**
   * @generated from field: repeated sf.substreams.internal.v2.ExternalCallMetric external_call_metrics = 5;
   */
  externalCallMetrics: ExternalCallMetric[];

  /**
   * store-specific (will be 0 on mappers)
   *
   * @generated from field: uint64 store_write_count = 10;
   */
  storeWriteCount: bigint;

  /**
   * @generated from field: uint64 store_deleteprefix_count = 11;
   */
  storeDeleteprefixCount: bigint;

  /**
   * @generated from field: uint64 store_size_bytes = 12;
   */
  storeSizeBytes: bigint;
};

/**
 * Describes the message sf.substreams.internal.v2.ModuleStats.
 * Use `create(ModuleStatsSchema)` to create a new message.
 */
export const ModuleStatsSchema: GenMessage<ModuleStats> = /*@__PURE__*/
  messageDesc(file_sf_substreams_intern_v2_service, 3);

/**
 * @generated from message sf.substreams.internal.v2.ExternalCallMetric
 */
export type ExternalCallMetric = Message<"sf.substreams.internal.v2.ExternalCallMetric"> & {
  /**
   * @generated from field: string name = 1;
   */
  name: string;

  /**
   * @generated from field: uint64 count = 2;
   */
  count: bigint;

  /**
   * @generated from field: uint64 time_ms = 3;
   */
  timeMs: bigint;
};

/**
 * Describes the message sf.substreams.internal.v2.ExternalCallMetric.
 * Use `create(ExternalCallMetricSchema)` to create a new message.
 */
export const ExternalCallMetricSchema: GenMessage<ExternalCallMetric> = /*@__PURE__*/
  messageDesc(file_sf_substreams_intern_v2_service, 4);

/**
 * @generated from message sf.substreams.internal.v2.Completed
 */
export type Completed = Message<"sf.substreams.internal.v2.Completed"> & {
  /**
   * @generated from field: repeated sf.substreams.internal.v2.BlockRange all_processed_ranges = 1;
   */
  allProcessedRanges: BlockRange[];

  /**
   * TraceId represents the producer's trace id that produced the partial files.
   * This is present here so that the consumer can use it to identify the
   * right partial files that needs to be squashed together.
   *
   * The TraceId can be empty in which case it should be assumed by the tier1
   * consuming this message that the tier2 that produced those partial files
   * is not yet updated to produce a trace id and a such, the tier1 should
   * generate a legacy partial file name.
   *
   * @generated from field: string trace_id = 2;
   */
  traceId: string;
};

/**
 * Describes the message sf.substreams.internal.v2.Completed.
 * Use `create(CompletedSchema)` to create a new message.
 */
export const CompletedSchema: GenMessage<Completed> = /*@__PURE__*/
  messageDesc(file_sf_substreams_intern_v2_service, 5);

/**
 * @generated from message sf.substreams.internal.v2.Failed
 */
export type Failed = Message<"sf.substreams.internal.v2.Failed"> & {
  /**
   * @generated from field: string reason = 1;
   */
  reason: string;

  /**
   * @generated from field: repeated string logs = 2;
   */
  logs: string[];

  /**
   * FailureLogsTruncated is a flag that tells you if you received all the logs or if they
   * were truncated because you logged too much (fixed limit currently is set to 128 KiB).
   *
   * @generated from field: bool logs_truncated = 3;
   */
  logsTruncated: boolean;
};

/**
 * Describes the message sf.substreams.internal.v2.Failed.
 * Use `create(FailedSchema)` to create a new message.
 */
export const FailedSchema: GenMessage<Failed> = /*@__PURE__*/
  messageDesc(file_sf_substreams_intern_v2_service, 6);

/**
 * @generated from message sf.substreams.internal.v2.BlockRange
 */
export type BlockRange = Message<"sf.substreams.internal.v2.BlockRange"> & {
  /**
   * @generated from field: uint64 start_block = 2;
   */
  startBlock: bigint;

  /**
   * @generated from field: uint64 end_block = 3;
   */
  endBlock: bigint;
};

/**
 * Describes the message sf.substreams.internal.v2.BlockRange.
 * Use `create(BlockRangeSchema)` to create a new message.
 */
export const BlockRangeSchema: GenMessage<BlockRange> = /*@__PURE__*/
  messageDesc(file_sf_substreams_intern_v2_service, 7);

/**
 * Possible types of WASM modules
 *
 * @generated from enum sf.substreams.internal.v2.WASMModuleType
 */
export enum WASMModuleType {
  /**
   * @generated from enum value: WASM_MODULE_TYPE_UNSPECIFIED = 0;
   */
  WASM_MODULE_TYPE_UNSPECIFIED = 0,

  /**
   * @generated from enum value: WASM_MODULE_TYPE_RPC_CALL = 1;
   */
  WASM_MODULE_TYPE_RPC_CALL = 1,
}

/**
 * Describes the enum sf.substreams.internal.v2.WASMModuleType.
 */
export const WASMModuleTypeSchema: GenEnum<WASMModuleType> = /*@__PURE__*/
  enumDesc(file_sf_substreams_intern_v2_service, 0);

/**
 * @generated from service sf.substreams.internal.v2.Substreams
 */
export const Substreams: GenService<{
  /**
   * @generated from rpc sf.substreams.internal.v2.Substreams.ProcessRange
   */
  processRange: {
    methodKind: "server_streaming";
    input: typeof ProcessRangeRequestSchema;
    output: typeof ProcessRangeResponseSchema;
  },
}> = /*@__PURE__*/
  serviceDesc(file_sf_substreams_intern_v2_service, 0);

