// @generated by protoc-gen-es v2.3.0 with parameter "target=ts"
// @generated from file sf/substreams/rpc/v2/service.proto (package sf.substreams.rpc.v2, syntax proto3)
/* eslint-disable */

import type { GenEnum, GenFile, GenMessage, GenService } from "@bufbuild/protobuf/codegenv1";
import { enumDesc, fileDesc, messageDesc, serviceDesc } from "@bufbuild/protobuf/codegenv1";
import type { Any } from "@bufbuild/protobuf/wkt";
import { file_google_protobuf_any } from "@bufbuild/protobuf/wkt";
import type { InfoRequestSchema, InfoResponseSchema } from "../../../firehose/v2/firehose_pb";
import { file_sf_firehose_v2_firehose } from "../../../firehose/v2/firehose_pb";
import type { BlockRef, Clock } from "../../v1/clock_pb";
import { file_sf_substreams_v1_clock } from "../../v1/clock_pb";
import type { Modules } from "../../v1/modules_pb";
import { file_sf_substreams_v1_modules } from "../../v1/modules_pb";
import type { Message } from "@bufbuild/protobuf";

/**
 * Describes the file sf/substreams/rpc/v2/service.proto.
 */
export const file_sf_substreams_rpc_v2_service: GenFile = /*@__PURE__*/
  fileDesc("CiJzZi9zdWJzdHJlYW1zL3JwYy92Mi9zZXJ2aWNlLnByb3RvEhRzZi5zdWJzdHJlYW1zLnJwYy52MiKsAgoHUmVxdWVzdBIXCg9zdGFydF9ibG9ja19udW0YASABKAMSFAoMc3RhcnRfY3Vyc29yGAIgASgJEhYKDnN0b3BfYmxvY2tfbnVtGAMgASgEEhkKEWZpbmFsX2Jsb2Nrc19vbmx5GAQgASgIEhcKD3Byb2R1Y3Rpb25fbW9kZRgFIAEoCBIVCg1vdXRwdXRfbW9kdWxlGAYgASgJEioKB21vZHVsZXMYByABKAsyGS5zZi5zdWJzdHJlYW1zLnYxLk1vZHVsZXMSMAooZGVidWdfaW5pdGlhbF9zdG9yZV9zbmFwc2hvdF9mb3JfbW9kdWxlcxgKIAMoCRIRCglub29wX21vZGUYCyABKAgSHgoWbGltaXRfcHJvY2Vzc2VkX2Jsb2NrcxgMIAEoBCLeAwoIUmVzcG9uc2USNAoHc2Vzc2lvbhgBIAEoCzIhLnNmLnN1YnN0cmVhbXMucnBjLnYyLlNlc3Npb25Jbml0SAASOQoIcHJvZ3Jlc3MYAiABKAsyJS5zZi5zdWJzdHJlYW1zLnJwYy52Mi5Nb2R1bGVzUHJvZ3Jlc3NIABJCChFibG9ja19zY29wZWRfZGF0YRgDIAEoCzIlLnNmLnN1YnN0cmVhbXMucnBjLnYyLkJsb2NrU2NvcGVkRGF0YUgAEkIKEWJsb2NrX3VuZG9fc2lnbmFsGAQgASgLMiUuc2Yuc3Vic3RyZWFtcy5ycGMudjIuQmxvY2tVbmRvU2lnbmFsSAASMgoLZmF0YWxfZXJyb3IYBSABKAsyGy5zZi5zdWJzdHJlYW1zLnJwYy52Mi5FcnJvckgAEkgKE2RlYnVnX3NuYXBzaG90X2RhdGEYCiABKAsyKS5zZi5zdWJzdHJlYW1zLnJwYy52Mi5Jbml0aWFsU25hcHNob3REYXRhSAASUAoXZGVidWdfc25hcHNob3RfY29tcGxldGUYCyABKAsyLS5zZi5zdWJzdHJlYW1zLnJwYy52Mi5Jbml0aWFsU25hcHNob3RDb21wbGV0ZUgAQgkKB21lc3NhZ2UiYgoPQmxvY2tVbmRvU2lnbmFsEjQKEGxhc3RfdmFsaWRfYmxvY2sYASABKAsyGi5zZi5zdWJzdHJlYW1zLnYxLkJsb2NrUmVmEhkKEWxhc3RfdmFsaWRfY3Vyc29yGAIgASgJIrkCCg9CbG9ja1Njb3BlZERhdGESNQoGb3V0cHV0GAEgASgLMiUuc2Yuc3Vic3RyZWFtcy5ycGMudjIuTWFwTW9kdWxlT3V0cHV0EiYKBWNsb2NrGAIgASgLMhcuc2Yuc3Vic3RyZWFtcy52MS5DbG9jaxIOCgZjdXJzb3IYAyABKAkSGgoSZmluYWxfYmxvY2tfaGVpZ2h0GAQgASgEEkAKEWRlYnVnX21hcF9vdXRwdXRzGAogAygLMiUuc2Yuc3Vic3RyZWFtcy5ycGMudjIuTWFwTW9kdWxlT3V0cHV0EkQKE2RlYnVnX3N0b3JlX291dHB1dHMYCyADKAsyJy5zZi5zdWJzdHJlYW1zLnJwYy52Mi5TdG9yZU1vZHVsZU91dHB1dBITCgthdHRlc3RhdGlvbhgMIAEoCSL3AgoLU2Vzc2lvbkluaXQSEAoIdHJhY2VfaWQYASABKAkSHAoUcmVzb2x2ZWRfc3RhcnRfYmxvY2sYAiABKAQSHAoUbGluZWFyX2hhbmRvZmZfYmxvY2sYAyABKAQSHAoUbWF4X3BhcmFsbGVsX3dvcmtlcnMYBCABKAQSHgoWYXR0ZXN0YXRpb25fcHVibGljX2tleRgFIAEoCRISCgpjaGFpbl9oZWFkGAYgASgEEiwKJGJsb2Nrc190b19wcm9jZXNzX2JlZm9yZV9zdGFydF9ibG9jaxgHIAEoBBI2Ci5lZmZlY3RpdmVfYmxvY2tzX3RvX3Byb2Nlc3NfYmVmb3JlX3N0YXJ0X2Jsb2NrGAggASgEEisKI2Jsb2Nrc190b19wcm9jZXNzX2FmdGVyX3N0YXJ0X2Jsb2NrGAkgASgEEjUKLWVmZmVjdGl2ZV9ibG9ja3NfdG9fcHJvY2Vzc19hZnRlcl9zdGFydF9ibG9jaxgKIAEoBCIpChdJbml0aWFsU25hcHNob3RDb21wbGV0ZRIOCgZjdXJzb3IYASABKAkigwEKE0luaXRpYWxTbmFwc2hvdERhdGESEwoLbW9kdWxlX25hbWUYASABKAkSMAoGZGVsdGFzGAIgAygLMiAuc2Yuc3Vic3RyZWFtcy5ycGMudjIuU3RvcmVEZWx0YRIRCglzZW50X2tleXMYBCABKAQSEgoKdG90YWxfa2V5cxgDIAEoBCKEAQoPTWFwTW9kdWxlT3V0cHV0EgwKBG5hbWUYASABKAkSKAoKbWFwX291dHB1dBgCIAEoCzIULmdvb2dsZS5wcm90b2J1Zi5BbnkSOQoKZGVidWdfaW5mbxgKIAEoCzIlLnNmLnN1YnN0cmVhbXMucnBjLnYyLk91dHB1dERlYnVnSW5mbyKaAQoRU3RvcmVNb2R1bGVPdXRwdXQSDAoEbmFtZRgBIAEoCRI8ChJkZWJ1Z19zdG9yZV9kZWx0YXMYAiADKAsyIC5zZi5zdWJzdHJlYW1zLnJwYy52Mi5TdG9yZURlbHRhEjkKCmRlYnVnX2luZm8YCiABKAsyJS5zZi5zdWJzdHJlYW1zLnJwYy52Mi5PdXRwdXREZWJ1Z0luZm8iRwoPT3V0cHV0RGVidWdJbmZvEgwKBGxvZ3MYASADKAkSFgoObG9nc190cnVuY2F0ZWQYAiABKAgSDgoGY2FjaGVkGAMgASgIIu4BCg9Nb2R1bGVzUHJvZ3Jlc3MSLwoMcnVubmluZ19qb2JzGAIgAygLMhkuc2Yuc3Vic3RyZWFtcy5ycGMudjIuSm9iEjgKDW1vZHVsZXNfc3RhdHMYAyADKAsyIS5zZi5zdWJzdHJlYW1zLnJwYy52Mi5Nb2R1bGVTdGF0cxIrCgZzdGFnZXMYBCADKAsyGy5zZi5zdWJzdHJlYW1zLnJwYy52Mi5TdGFnZRI9Cg9wcm9jZXNzZWRfYnl0ZXMYBSABKAsyJC5zZi5zdWJzdHJlYW1zLnJwYy52Mi5Qcm9jZXNzZWRCeXRlc0oECAEQAiJHCg5Qcm9jZXNzZWRCeXRlcxIYChB0b3RhbF9ieXRlc19yZWFkGAEgASgEEhsKE3RvdGFsX2J5dGVzX3dyaXR0ZW4YAiABKAQiTQoFRXJyb3ISDgoGbW9kdWxlGAEgASgJEg4KBnJlYXNvbhgCIAEoCRIMCgRsb2dzGAMgAygJEhYKDmxvZ3NfdHJ1bmNhdGVkGAQgASgIImwKA0pvYhINCgVzdGFnZRgBIAEoDRITCgtzdGFydF9ibG9jaxgCIAEoBBISCgpzdG9wX2Jsb2NrGAMgASgEEhgKEHByb2Nlc3NlZF9ibG9ja3MYBCABKAQSEwoLZHVyYXRpb25fbXMYBSABKAQiVAoFU3RhZ2USDwoHbW9kdWxlcxgBIAMoCRI6ChBjb21wbGV0ZWRfcmFuZ2VzGAIgAygLMiAuc2Yuc3Vic3RyZWFtcy5ycGMudjIuQmxvY2tSYW5nZSK9AwoLTW9kdWxlU3RhdHMSDAoEbmFtZRgBIAEoCRIjCht0b3RhbF9wcm9jZXNzZWRfYmxvY2tfY291bnQYAiABKAQSIAoYdG90YWxfcHJvY2Vzc2luZ190aW1lX21zGAMgASgEEkcKFWV4dGVybmFsX2NhbGxfbWV0cmljcxgEIAMoCzIoLnNmLnN1YnN0cmVhbXMucnBjLnYyLkV4dGVybmFsQ2FsbE1ldHJpYxIlCh10b3RhbF9zdG9yZV9vcGVyYXRpb25fdGltZV9tcxgFIAEoBBIeChZ0b3RhbF9zdG9yZV9yZWFkX2NvdW50GAYgASgEEh8KF3RvdGFsX3N0b3JlX3dyaXRlX2NvdW50GAogASgEEiYKHnRvdGFsX3N0b3JlX2RlbGV0ZXByZWZpeF9jb3VudBgLIAEoBBIYChBzdG9yZV9zaXplX2J5dGVzGAwgASgEEiMKG3RvdGFsX3N0b3JlX21lcmdpbmdfdGltZV9tcxgNIAEoBBIfChdzdG9yZV9jdXJyZW50bHlfbWVyZ2luZxgOIAEoCBIgChhoaWdoZXN0X2NvbnRpZ3VvdXNfYmxvY2sYDyABKAQiQgoSRXh0ZXJuYWxDYWxsTWV0cmljEgwKBG5hbWUYASABKAkSDQoFY291bnQYAiABKAQSDwoHdGltZV9tcxgDIAEoBCLLAQoKU3RvcmVEZWx0YRI9CglvcGVyYXRpb24YASABKA4yKi5zZi5zdWJzdHJlYW1zLnJwYy52Mi5TdG9yZURlbHRhLk9wZXJhdGlvbhIPCgdvcmRpbmFsGAIgASgEEgsKA2tleRgDIAEoCRIRCglvbGRfdmFsdWUYBCABKAwSEQoJbmV3X3ZhbHVlGAUgASgMIjoKCU9wZXJhdGlvbhIJCgVVTlNFVBAAEgoKBkNSRUFURRABEgoKBlVQREFURRACEgoKBkRFTEVURRADIjQKCkJsb2NrUmFuZ2USEwoLc3RhcnRfYmxvY2sYAiABKAQSEQoJZW5kX2Jsb2NrGAMgASgEMlMKBlN0cmVhbRJJCgZCbG9ja3MSHS5zZi5zdWJzdHJlYW1zLnJwYy52Mi5SZXF1ZXN0Gh4uc2Yuc3Vic3RyZWFtcy5ycGMudjIuUmVzcG9uc2UwATJRCgxFbmRwb2ludEluZm8SQQoESW5mbxIbLnNmLmZpcmVob3NlLnYyLkluZm9SZXF1ZXN0Ghwuc2YuZmlyZWhvc2UudjIuSW5mb1Jlc3BvbnNlQk1aS2dpdGh1Yi5jb20vc3RyZWFtaW5nZmFzdC9zdWJzdHJlYW1zL3BiL3NmL3N1YnN0cmVhbXMvcnBjL3YyO3Bic3Vic3RyZWFtc3JwY2IGcHJvdG8z", [file_google_protobuf_any, file_sf_firehose_v2_firehose, file_sf_substreams_v1_clock, file_sf_substreams_v1_modules]);

/**
 * @generated from message sf.substreams.rpc.v2.Request
 */
export type Request = Message<"sf.substreams.rpc.v2.Request"> & {
  /**
   * @generated from field: int64 start_block_num = 1;
   */
  startBlockNum: bigint;

  /**
   * @generated from field: string start_cursor = 2;
   */
  startCursor: string;

  /**
   * @generated from field: uint64 stop_block_num = 3;
   */
  stopBlockNum: bigint;

  /**
   * With final_block_only, you only receive blocks that are irreversible:
   * 'final_block_height' will be equal to current block and no 'undo_signal' will ever be sent
   *
   * @generated from field: bool final_blocks_only = 4;
   */
  finalBlocksOnly: boolean;

  /**
   * Substreams has two mode when executing your module(s) either development mode or production
   * mode. Development and production modes impact the execution of Substreams, important aspects
   * of execution include:
   * * The time required to reach the first byte.
   * * The speed that large ranges get executed.
   * * The module logs and outputs sent back to the client.
   *
   * By default, the engine runs in developer mode, with richer and deeper output. Differences
   * between production and development modes include:
   * * Forward parallel execution is enabled in production mode and disabled in development mode
   * * The time required to reach the first byte in development mode is faster than in production mode.
   *
   * Specific attributes of development mode include:
   * * The client will receive all of the executed module's logs.
   * * It's possible to request specific store snapshots in the execution tree (via `debug_initial_store_snapshot_for_modules`).
   * * Multiple module's output is possible.
   *
   * With production mode`, however, you trade off functionality for high speed enabling forward
   * parallel execution of module ahead of time.
   *
   * @generated from field: bool production_mode = 5;
   */
  productionMode: boolean;

  /**
   * @generated from field: string output_module = 6;
   */
  outputModule: string;

  /**
   * @generated from field: sf.substreams.v1.Modules modules = 7;
   */
  modules?: Modules;

  /**
   * Available only in developer mode
   *
   * @generated from field: repeated string debug_initial_store_snapshot_for_modules = 10;
   */
  debugInitialStoreSnapshotForModules: string[];

  /**
   * @generated from field: bool noop_mode = 11;
   */
  noopMode: boolean;

  /**
   * If set, the engine will reject a request if the number of blocks to process (including preparing the stores) is above this limit.
   * Useful as a safeguard for managing costs
   *
   * @generated from field: uint64 limit_processed_blocks = 12;
   */
  limitProcessedBlocks: bigint;
};

/**
 * Describes the message sf.substreams.rpc.v2.Request.
 * Use `create(RequestSchema)` to create a new message.
 */
export const RequestSchema: GenMessage<Request> = /*@__PURE__*/
  messageDesc(file_sf_substreams_rpc_v2_service, 0);

/**
 * @generated from message sf.substreams.rpc.v2.Response
 */
export type Response = Message<"sf.substreams.rpc.v2.Response"> & {
  /**
   * @generated from oneof sf.substreams.rpc.v2.Response.message
   */
  message: {
    /**
     * Always sent first
     *
     * @generated from field: sf.substreams.rpc.v2.SessionInit session = 1;
     */
    value: SessionInit;
    case: "session";
  } | {
    /**
     * Progress of data preparation, before sending in the stream of `data` events.
     *
     * @generated from field: sf.substreams.rpc.v2.ModulesProgress progress = 2;
     */
    value: ModulesProgress;
    case: "progress";
  } | {
    /**
     * @generated from field: sf.substreams.rpc.v2.BlockScopedData block_scoped_data = 3;
     */
    value: BlockScopedData;
    case: "blockScopedData";
  } | {
    /**
     * @generated from field: sf.substreams.rpc.v2.BlockUndoSignal block_undo_signal = 4;
     */
    value: BlockUndoSignal;
    case: "blockUndoSignal";
  } | {
    /**
     * @generated from field: sf.substreams.rpc.v2.Error fatal_error = 5;
     */
    value: Error;
    case: "fatalError";
  } | {
    /**
     * Available only in developer mode, and only if `debug_initial_store_snapshot_for_modules` is set.
     *
     * @generated from field: sf.substreams.rpc.v2.InitialSnapshotData debug_snapshot_data = 10;
     */
    value: InitialSnapshotData;
    case: "debugSnapshotData";
  } | {
    /**
     * Available only in developer mode, and only if `debug_initial_store_snapshot_for_modules` is set.
     *
     * @generated from field: sf.substreams.rpc.v2.InitialSnapshotComplete debug_snapshot_complete = 11;
     */
    value: InitialSnapshotComplete;
    case: "debugSnapshotComplete";
  } | { case: undefined; value?: undefined };
};

/**
 * Describes the message sf.substreams.rpc.v2.Response.
 * Use `create(ResponseSchema)` to create a new message.
 */
export const ResponseSchema: GenMessage<Response> = /*@__PURE__*/
  messageDesc(file_sf_substreams_rpc_v2_service, 1);

/**
 * BlockUndoSignal informs you that every bit of data
 * with a block number above 'last_valid_block' has been reverted
 * on-chain. Delete that data and restart from 'last_valid_cursor'
 *
 * @generated from message sf.substreams.rpc.v2.BlockUndoSignal
 */
export type BlockUndoSignal = Message<"sf.substreams.rpc.v2.BlockUndoSignal"> & {
  /**
   * @generated from field: sf.substreams.v1.BlockRef last_valid_block = 1;
   */
  lastValidBlock?: BlockRef;

  /**
   * @generated from field: string last_valid_cursor = 2;
   */
  lastValidCursor: string;
};

/**
 * Describes the message sf.substreams.rpc.v2.BlockUndoSignal.
 * Use `create(BlockUndoSignalSchema)` to create a new message.
 */
export const BlockUndoSignalSchema: GenMessage<BlockUndoSignal> = /*@__PURE__*/
  messageDesc(file_sf_substreams_rpc_v2_service, 2);

/**
 * @generated from message sf.substreams.rpc.v2.BlockScopedData
 */
export type BlockScopedData = Message<"sf.substreams.rpc.v2.BlockScopedData"> & {
  /**
   * @generated from field: sf.substreams.rpc.v2.MapModuleOutput output = 1;
   */
  output?: MapModuleOutput;

  /**
   * @generated from field: sf.substreams.v1.Clock clock = 2;
   */
  clock?: Clock;

  /**
   * @generated from field: string cursor = 3;
   */
  cursor: string;

  /**
   * Non-deterministic, allows substreams-sink to let go of their undo data.
   *
   * @generated from field: uint64 final_block_height = 4;
   */
  finalBlockHeight: bigint;

  /**
   * @generated from field: repeated sf.substreams.rpc.v2.MapModuleOutput debug_map_outputs = 10;
   */
  debugMapOutputs: MapModuleOutput[];

  /**
   * @generated from field: repeated sf.substreams.rpc.v2.StoreModuleOutput debug_store_outputs = 11;
   */
  debugStoreOutputs: StoreModuleOutput[];

  /**
   * Signed attestation, enabling economic security as per GIP-0083. Signatures are
   * done using the key specified by SessionInit::attestation_public_key.
   *
   * @generated from field: string attestation = 12;
   */
  attestation: string;
};

/**
 * Describes the message sf.substreams.rpc.v2.BlockScopedData.
 * Use `create(BlockScopedDataSchema)` to create a new message.
 */
export const BlockScopedDataSchema: GenMessage<BlockScopedData> = /*@__PURE__*/
  messageDesc(file_sf_substreams_rpc_v2_service, 3);

/**
 * @generated from message sf.substreams.rpc.v2.SessionInit
 */
export type SessionInit = Message<"sf.substreams.rpc.v2.SessionInit"> & {
  /**
   * @generated from field: string trace_id = 1;
   */
  traceId: string;

  /**
   * @generated from field: uint64 resolved_start_block = 2;
   */
  resolvedStartBlock: bigint;

  /**
   * @generated from field: uint64 linear_handoff_block = 3;
   */
  linearHandoffBlock: bigint;

  /**
   * @generated from field: uint64 max_parallel_workers = 4;
   */
  maxParallelWorkers: bigint;

  /**
   * Operator's attestation public_key or address, enabling economic security as per GIP-0083.
   *
   * @generated from field: string attestation_public_key = 5;
   */
  attestationPublicKey: string;

  /**
   * @generated from field: uint64 chain_head = 6;
   */
  chainHead: bigint;

  /**
   * theoretical number of blocks that need to be processed __before any data is sent__, without consideration for current cached states
   * Because of parallel work, 1000 blocks with 2 "store stages" will result in 2000 blocks to process
   *
   * @generated from field: uint64 blocks_to_process_before_start_block = 7;
   */
  blocksToProcessBeforeStartBlock: bigint;

  /**
   * same as `blocks_to_process_before_start_block`, but excluding the current cached states
   *
   * @generated from field: uint64 effective_blocks_to_process_before_start_block = 8;
   */
  effectiveBlocksToProcessBeforeStartBlock: bigint;

  /**
   * theoretical number of blocks that will be processed inside the requested range, without consideration for current cached outputs
   * if the range is open-ended, it is calculated up to the current chain head
   * in production-mode, 1000 blocks with 3 "stages" will result in 3000 blocks to process
   *
   * @generated from field: uint64 blocks_to_process_after_start_block = 9;
   */
  blocksToProcessAfterStartBlock: bigint;

  /**
   * same as `blocks_to_process_after_start_block`, but excluding the current cached outputs
   *
   * @generated from field: uint64 effective_blocks_to_process_after_start_block = 10;
   */
  effectiveBlocksToProcessAfterStartBlock: bigint;
};

/**
 * Describes the message sf.substreams.rpc.v2.SessionInit.
 * Use `create(SessionInitSchema)` to create a new message.
 */
export const SessionInitSchema: GenMessage<SessionInit> = /*@__PURE__*/
  messageDesc(file_sf_substreams_rpc_v2_service, 4);

/**
 * @generated from message sf.substreams.rpc.v2.InitialSnapshotComplete
 */
export type InitialSnapshotComplete = Message<"sf.substreams.rpc.v2.InitialSnapshotComplete"> & {
  /**
   * @generated from field: string cursor = 1;
   */
  cursor: string;
};

/**
 * Describes the message sf.substreams.rpc.v2.InitialSnapshotComplete.
 * Use `create(InitialSnapshotCompleteSchema)` to create a new message.
 */
export const InitialSnapshotCompleteSchema: GenMessage<InitialSnapshotComplete> = /*@__PURE__*/
  messageDesc(file_sf_substreams_rpc_v2_service, 5);

/**
 * @generated from message sf.substreams.rpc.v2.InitialSnapshotData
 */
export type InitialSnapshotData = Message<"sf.substreams.rpc.v2.InitialSnapshotData"> & {
  /**
   * @generated from field: string module_name = 1;
   */
  moduleName: string;

  /**
   * @generated from field: repeated sf.substreams.rpc.v2.StoreDelta deltas = 2;
   */
  deltas: StoreDelta[];

  /**
   * @generated from field: uint64 sent_keys = 4;
   */
  sentKeys: bigint;

  /**
   * @generated from field: uint64 total_keys = 3;
   */
  totalKeys: bigint;
};

/**
 * Describes the message sf.substreams.rpc.v2.InitialSnapshotData.
 * Use `create(InitialSnapshotDataSchema)` to create a new message.
 */
export const InitialSnapshotDataSchema: GenMessage<InitialSnapshotData> = /*@__PURE__*/
  messageDesc(file_sf_substreams_rpc_v2_service, 6);

/**
 * @generated from message sf.substreams.rpc.v2.MapModuleOutput
 */
export type MapModuleOutput = Message<"sf.substreams.rpc.v2.MapModuleOutput"> & {
  /**
   * @generated from field: string name = 1;
   */
  name: string;

  /**
   * @generated from field: google.protobuf.Any map_output = 2;
   */
  mapOutput?: Any;

  /**
   * DebugOutputInfo is available in non-production mode only
   *
   * @generated from field: sf.substreams.rpc.v2.OutputDebugInfo debug_info = 10;
   */
  debugInfo?: OutputDebugInfo;
};

/**
 * Describes the message sf.substreams.rpc.v2.MapModuleOutput.
 * Use `create(MapModuleOutputSchema)` to create a new message.
 */
export const MapModuleOutputSchema: GenMessage<MapModuleOutput> = /*@__PURE__*/
  messageDesc(file_sf_substreams_rpc_v2_service, 7);

/**
 * StoreModuleOutput are produced for store modules in development mode.
 * It is not possible to retrieve store models in production, with parallelization
 * enabled. If you need the deltas directly, write a pass through mapper module
 * that will get them down to you.
 *
 * @generated from message sf.substreams.rpc.v2.StoreModuleOutput
 */
export type StoreModuleOutput = Message<"sf.substreams.rpc.v2.StoreModuleOutput"> & {
  /**
   * @generated from field: string name = 1;
   */
  name: string;

  /**
   * @generated from field: repeated sf.substreams.rpc.v2.StoreDelta debug_store_deltas = 2;
   */
  debugStoreDeltas: StoreDelta[];

  /**
   * @generated from field: sf.substreams.rpc.v2.OutputDebugInfo debug_info = 10;
   */
  debugInfo?: OutputDebugInfo;
};

/**
 * Describes the message sf.substreams.rpc.v2.StoreModuleOutput.
 * Use `create(StoreModuleOutputSchema)` to create a new message.
 */
export const StoreModuleOutputSchema: GenMessage<StoreModuleOutput> = /*@__PURE__*/
  messageDesc(file_sf_substreams_rpc_v2_service, 8);

/**
 * @generated from message sf.substreams.rpc.v2.OutputDebugInfo
 */
export type OutputDebugInfo = Message<"sf.substreams.rpc.v2.OutputDebugInfo"> & {
  /**
   * @generated from field: repeated string logs = 1;
   */
  logs: string[];

  /**
   * LogsTruncated is a flag that tells you if you received all the logs or if they
   * were truncated because you logged too much (fixed limit currently is set to 128 KiB).
   *
   * @generated from field: bool logs_truncated = 2;
   */
  logsTruncated: boolean;

  /**
   * @generated from field: bool cached = 3;
   */
  cached: boolean;
};

/**
 * Describes the message sf.substreams.rpc.v2.OutputDebugInfo.
 * Use `create(OutputDebugInfoSchema)` to create a new message.
 */
export const OutputDebugInfoSchema: GenMessage<OutputDebugInfo> = /*@__PURE__*/
  messageDesc(file_sf_substreams_rpc_v2_service, 9);

/**
 * ModulesProgress is a message that is sent every 500ms
 *
 * @generated from message sf.substreams.rpc.v2.ModulesProgress
 */
export type ModulesProgress = Message<"sf.substreams.rpc.v2.ModulesProgress"> & {
  /**
   * List of jobs running on tier2 servers
   *
   * @generated from field: repeated sf.substreams.rpc.v2.Job running_jobs = 2;
   */
  runningJobs: Job[];

  /**
   * Execution statistics for each module
   *
   * @generated from field: repeated sf.substreams.rpc.v2.ModuleStats modules_stats = 3;
   */
  modulesStats: ModuleStats[];

  /**
   * Stages definition and completed block ranges
   *
   * @generated from field: repeated sf.substreams.rpc.v2.Stage stages = 4;
   */
  stages: Stage[];

  /**
   * @generated from field: sf.substreams.rpc.v2.ProcessedBytes processed_bytes = 5;
   */
  processedBytes?: ProcessedBytes;
};

/**
 * Describes the message sf.substreams.rpc.v2.ModulesProgress.
 * Use `create(ModulesProgressSchema)` to create a new message.
 */
export const ModulesProgressSchema: GenMessage<ModulesProgress> = /*@__PURE__*/
  messageDesc(file_sf_substreams_rpc_v2_service, 10);

/**
 * @generated from message sf.substreams.rpc.v2.ProcessedBytes
 */
export type ProcessedBytes = Message<"sf.substreams.rpc.v2.ProcessedBytes"> & {
  /**
   * @generated from field: uint64 total_bytes_read = 1;
   */
  totalBytesRead: bigint;

  /**
   * @generated from field: uint64 total_bytes_written = 2;
   */
  totalBytesWritten: bigint;
};

/**
 * Describes the message sf.substreams.rpc.v2.ProcessedBytes.
 * Use `create(ProcessedBytesSchema)` to create a new message.
 */
export const ProcessedBytesSchema: GenMessage<ProcessedBytes> = /*@__PURE__*/
  messageDesc(file_sf_substreams_rpc_v2_service, 11);

/**
 * @generated from message sf.substreams.rpc.v2.Error
 */
export type Error = Message<"sf.substreams.rpc.v2.Error"> & {
  /**
   * @generated from field: string module = 1;
   */
  module: string;

  /**
   * @generated from field: string reason = 2;
   */
  reason: string;

  /**
   * @generated from field: repeated string logs = 3;
   */
  logs: string[];

  /**
   * FailureLogsTruncated is a flag that tells you if you received all the logs or if they
   * were truncated because you logged too much (fixed limit currently is set to 128 KiB).
   *
   * @generated from field: bool logs_truncated = 4;
   */
  logsTruncated: boolean;
};

/**
 * Describes the message sf.substreams.rpc.v2.Error.
 * Use `create(ErrorSchema)` to create a new message.
 */
export const ErrorSchema: GenMessage<Error> = /*@__PURE__*/
  messageDesc(file_sf_substreams_rpc_v2_service, 12);

/**
 * @generated from message sf.substreams.rpc.v2.Job
 */
export type Job = Message<"sf.substreams.rpc.v2.Job"> & {
  /**
   * @generated from field: uint32 stage = 1;
   */
  stage: number;

  /**
   * @generated from field: uint64 start_block = 2;
   */
  startBlock: bigint;

  /**
   * @generated from field: uint64 stop_block = 3;
   */
  stopBlock: bigint;

  /**
   * @generated from field: uint64 processed_blocks = 4;
   */
  processedBlocks: bigint;

  /**
   * @generated from field: uint64 duration_ms = 5;
   */
  durationMs: bigint;
};

/**
 * Describes the message sf.substreams.rpc.v2.Job.
 * Use `create(JobSchema)` to create a new message.
 */
export const JobSchema: GenMessage<Job> = /*@__PURE__*/
  messageDesc(file_sf_substreams_rpc_v2_service, 13);

/**
 * @generated from message sf.substreams.rpc.v2.Stage
 */
export type Stage = Message<"sf.substreams.rpc.v2.Stage"> & {
  /**
   * @generated from field: repeated string modules = 1;
   */
  modules: string[];

  /**
   * @generated from field: repeated sf.substreams.rpc.v2.BlockRange completed_ranges = 2;
   */
  completedRanges: BlockRange[];
};

/**
 * Describes the message sf.substreams.rpc.v2.Stage.
 * Use `create(StageSchema)` to create a new message.
 */
export const StageSchema: GenMessage<Stage> = /*@__PURE__*/
  messageDesc(file_sf_substreams_rpc_v2_service, 14);

/**
 * ModuleStats gathers metrics and statistics from each module, running on tier1 or tier2
 * All the 'count' and 'time_ms' values may include duplicate for each stage going over that module
 *
 * @generated from message sf.substreams.rpc.v2.ModuleStats
 */
export type ModuleStats = Message<"sf.substreams.rpc.v2.ModuleStats"> & {
  /**
   * name of the module
   *
   * @generated from field: string name = 1;
   */
  name: string;

  /**
   * total_processed_blocks is the sum of blocks sent to that module code
   *
   * @generated from field: uint64 total_processed_block_count = 2;
   */
  totalProcessedBlockCount: bigint;

  /**
   * total_processing_time_ms is the sum of all time spent running that module code
   *
   * @generated from field: uint64 total_processing_time_ms = 3;
   */
  totalProcessingTimeMs: bigint;

  /**
   * // external_calls are chain-specific intrinsics, like "Ethereum RPC calls".
   *
   * @generated from field: repeated sf.substreams.rpc.v2.ExternalCallMetric external_call_metrics = 4;
   */
  externalCallMetrics: ExternalCallMetric[];

  /**
   * total_store_operation_time_ms is the sum of all time spent running that module code waiting for a store operation (ex: read, write, delete...)
   *
   * @generated from field: uint64 total_store_operation_time_ms = 5;
   */
  totalStoreOperationTimeMs: bigint;

  /**
   * total_store_read_count is the sum of all the store Read operations called from that module code
   *
   * @generated from field: uint64 total_store_read_count = 6;
   */
  totalStoreReadCount: bigint;

  /**
   * total_store_write_count is the sum of all store Write operations called from that module code (store-only)
   *
   * @generated from field: uint64 total_store_write_count = 10;
   */
  totalStoreWriteCount: bigint;

  /**
   * total_store_deleteprefix_count is the sum of all store DeletePrefix operations called from that module code (store-only)
   * note that DeletePrefix can be a costly operation on large stores
   *
   * @generated from field: uint64 total_store_deleteprefix_count = 11;
   */
  totalStoreDeleteprefixCount: bigint;

  /**
   * store_size_bytes is the uncompressed size of the full KV store for that module, from the last 'merge' operation (store-only)
   *
   * @generated from field: uint64 store_size_bytes = 12;
   */
  storeSizeBytes: bigint;

  /**
   * total_store_merging_time_ms is the time spent merging partial stores into a full KV store for that module (store-only)
   *
   * @generated from field: uint64 total_store_merging_time_ms = 13;
   */
  totalStoreMergingTimeMs: bigint;

  /**
   * store_currently_merging is true if there is a merging operation (partial store to full KV store) on the way.
   *
   * @generated from field: bool store_currently_merging = 14;
   */
  storeCurrentlyMerging: boolean;

  /**
   * highest_contiguous_block is the highest block in the highest merged full KV store of that module (store-only)
   *
   * @generated from field: uint64 highest_contiguous_block = 15;
   */
  highestContiguousBlock: bigint;
};

/**
 * Describes the message sf.substreams.rpc.v2.ModuleStats.
 * Use `create(ModuleStatsSchema)` to create a new message.
 */
export const ModuleStatsSchema: GenMessage<ModuleStats> = /*@__PURE__*/
  messageDesc(file_sf_substreams_rpc_v2_service, 15);

/**
 * @generated from message sf.substreams.rpc.v2.ExternalCallMetric
 */
export type ExternalCallMetric = Message<"sf.substreams.rpc.v2.ExternalCallMetric"> & {
  /**
   * @generated from field: string name = 1;
   */
  name: string;

  /**
   * @generated from field: uint64 count = 2;
   */
  count: bigint;

  /**
   * @generated from field: uint64 time_ms = 3;
   */
  timeMs: bigint;
};

/**
 * Describes the message sf.substreams.rpc.v2.ExternalCallMetric.
 * Use `create(ExternalCallMetricSchema)` to create a new message.
 */
export const ExternalCallMetricSchema: GenMessage<ExternalCallMetric> = /*@__PURE__*/
  messageDesc(file_sf_substreams_rpc_v2_service, 16);

/**
 * @generated from message sf.substreams.rpc.v2.StoreDelta
 */
export type StoreDelta = Message<"sf.substreams.rpc.v2.StoreDelta"> & {
  /**
   * @generated from field: sf.substreams.rpc.v2.StoreDelta.Operation operation = 1;
   */
  operation: StoreDelta_Operation;

  /**
   * @generated from field: uint64 ordinal = 2;
   */
  ordinal: bigint;

  /**
   * @generated from field: string key = 3;
   */
  key: string;

  /**
   * @generated from field: bytes old_value = 4;
   */
  oldValue: Uint8Array;

  /**
   * @generated from field: bytes new_value = 5;
   */
  newValue: Uint8Array;
};

/**
 * Describes the message sf.substreams.rpc.v2.StoreDelta.
 * Use `create(StoreDeltaSchema)` to create a new message.
 */
export const StoreDeltaSchema: GenMessage<StoreDelta> = /*@__PURE__*/
  messageDesc(file_sf_substreams_rpc_v2_service, 17);

/**
 * @generated from enum sf.substreams.rpc.v2.StoreDelta.Operation
 */
export enum StoreDelta_Operation {
  /**
   * @generated from enum value: UNSET = 0;
   */
  UNSET = 0,

  /**
   * @generated from enum value: CREATE = 1;
   */
  CREATE = 1,

  /**
   * @generated from enum value: UPDATE = 2;
   */
  UPDATE = 2,

  /**
   * @generated from enum value: DELETE = 3;
   */
  DELETE = 3,
}

/**
 * Describes the enum sf.substreams.rpc.v2.StoreDelta.Operation.
 */
export const StoreDelta_OperationSchema: GenEnum<StoreDelta_Operation> = /*@__PURE__*/
  enumDesc(file_sf_substreams_rpc_v2_service, 17, 0);

/**
 * @generated from message sf.substreams.rpc.v2.BlockRange
 */
export type BlockRange = Message<"sf.substreams.rpc.v2.BlockRange"> & {
  /**
   * @generated from field: uint64 start_block = 2;
   */
  startBlock: bigint;

  /**
   * @generated from field: uint64 end_block = 3;
   */
  endBlock: bigint;
};

/**
 * Describes the message sf.substreams.rpc.v2.BlockRange.
 * Use `create(BlockRangeSchema)` to create a new message.
 */
export const BlockRangeSchema: GenMessage<BlockRange> = /*@__PURE__*/
  messageDesc(file_sf_substreams_rpc_v2_service, 18);

/**
 * @generated from service sf.substreams.rpc.v2.Stream
 */
export const Stream: GenService<{
  /**
   * @generated from rpc sf.substreams.rpc.v2.Stream.Blocks
   */
  blocks: {
    methodKind: "server_streaming";
    input: typeof RequestSchema;
    output: typeof ResponseSchema;
  },
}> = /*@__PURE__*/
  serviceDesc(file_sf_substreams_rpc_v2_service, 0);

/**
 * @generated from service sf.substreams.rpc.v2.EndpointInfo
 */
export const EndpointInfo: GenService<{
  /**
   * @generated from rpc sf.substreams.rpc.v2.EndpointInfo.Info
   */
  info: {
    methodKind: "unary";
    input: typeof InfoRequestSchema;
    output: typeof InfoResponseSchema;
  },
}> = /*@__PURE__*/
  serviceDesc(file_sf_substreams_rpc_v2_service, 1);

